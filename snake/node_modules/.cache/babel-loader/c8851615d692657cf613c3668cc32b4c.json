{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\components\\\\homePage\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport createBoard from '../createBoard';\nimport Tile from './Tile';\nimport Cell from './Cell';\nimport BottomCells from './BottomCells';\nimport { ChosenMap } from '../ChosenMap';\nimport Axios from \"axios\";\nimport '../../App.css';\nimport Mestint from '../Mestint';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    chosenMap,\n    setChosenMap\n  } = useContext(ChosenMap);\n  const [grid, setGrid] = useState([]);\n  const [lastPos, setLastPos] = useState([0, 0]);\n  const [BottomSide, setBottomSide] = useState([0]);\n  const [rightSide, setRightSide] = useState([0]);\n  const [teste, setTeste] = useState(0);\n  const [aiBoard, setAIBoard] = useState([]);\n  const [aiLastPos, setAiiLastPos] = useState([]); //létre hozzuk a boardot\n\n  useEffect(() => {\n    let width = 5;\n    let height = 5;\n    let parts = \"0,0,0,1,0,2,\";\n    let stones = \"1,0,1,2,1,4,3,0,\";\n    let right = \"3,0,0,0,0\";\n    let bottom = \"1,1,1,0,0\";\n\n    function mapGetter() {\n      Axios.get(`http://localhost:3001/api/loadMap/${chosenMap}`).then(response => {\n        width = response.data[0].width;\n        height = response.data[0].height;\n        parts = response.data[0].parts;\n        stones = response.data[0].stones;\n        right = response.data[0].rightS;\n        bottom = response.data[0].bottom;\n\n        function freshBoard() {\n          const newBoard = createBoard(width, height, parts, stones, right, bottom);\n          setAIBoard(newBoard);\n          setGrid(newBoard.board);\n          setBottomSide(newBoard.bottom);\n          setRightSide(newBoard.right);\n\n          function getStarterPos() {\n            newBoard.board.map((singleRow, index1) => {\n              singleRow.map((singleBlock, index2) => {\n                if (singleBlock.value === 1) {\n                  setLastPos([index1, index2]);\n                  setAiiLastPos([index1, index2]);\n                }\n              });\n            });\n          }\n\n          getStarterPos();\n        }\n\n        freshBoard();\n      });\n    }\n\n    mapGetter();\n  }, []);\n\n  const megoldasE = () => {\n    let rightCount = 0;\n    let bottomCount = 0;\n    let bodypartCount = 0; //oldalsó check\n\n    grid.map((singleRow, index1) => {\n      let rowCount = 0;\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 1) {\n          rowCount++;\n        }\n      });\n\n      if (rowCount === rightSide[index1]) {\n        rightCount++;\n      }\n    }); //alsó check\n\n    if (BottomSide.length > 1) {\n      for (let i = 0; i < BottomSide.length; i++) {\n        let colCount = 0;\n\n        for (let j = 0; j < rightSide.length; j++) {\n          if (grid[j][i].value === 1) {\n            colCount++;\n          }\n        }\n\n        if (colCount === BottomSide[i]) {\n          bottomCount++;\n        }\n      }\n    } //testresz check\n\n\n    grid.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 3) {\n          bodypartCount++;\n        }\n\n        if (singleBlock.value === 4) {\n          bodypartCount++;\n        }\n      });\n    });\n\n    if (rightCount === rightSide.length && bottomCount === BottomSide.length && bodypartCount === 0) {\n      alert('win');\n    }\n  }; //mezőre kattintás\n\n\n  const tileClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let elozo = lastPos;\n\n    if (x === elozo[0]) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n        if (teste === 0) {\n          if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n            newGrid[x][y].value = 1;\n            elozo[1] = y;\n            setGrid(newGrid);\n          }\n        }\n\n        if (teste === 1) {\n          if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n            newGrid[x][y].value = 1;\n            elozo[1] = y;\n            setGrid(newGrid);\n          }\n        }\n      }\n    }\n\n    if (y === elozo[1]) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n        if (x + 1 === elozo[0] || x - 1 === elozo[0]) {\n          newGrid[x][y].value = 1;\n          elozo[0] = x;\n          setGrid(newGrid);\n        }\n      }\n\n      setLastPos(elozo);\n    }\n  }; //Mestint\n\n\n  const solver = (x, y) => {\n    let megoldas = Mestint(aiBoard, aiLastPos);\n    console.log(megoldas.megoldas.board);\n    console.log(grid);\n\n    if (megoldas !== null) {\n      setGrid(megoldas.megoldas.board);\n    }\n  }; //renderelés\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [grid.map((singleRow, index1) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: [singleRow.map((singleBlock, index2) => {\n          return /*#__PURE__*/_jsxDEV(Tile, {\n            details: singleBlock,\n            tileClick: tileClick\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 159,\n            columnNumber: 18\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Cell, {\n          value: rightSide[index1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 162,\n          columnNumber: 12\n        }, this)]\n      }, index1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 14\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(BottomCells, {\n      values: BottomSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"gomb\",\n        onClick: megoldasE,\n        children: \"Check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 171,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"gomb\",\n        onClick: solver,\n        children: \"Solve with AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 174,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 173,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 153,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Board, \"aF/evTdiU8c+QAmz8BoruPImPD8=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/components/homePage/Board.js"],"names":["React","useEffect","useState","useContext","createBoard","Tile","Cell","BottomCells","ChosenMap","Axios","Mestint","Board","chosenMap","setChosenMap","grid","setGrid","lastPos","setLastPos","BottomSide","setBottomSide","rightSide","setRightSide","teste","setTeste","aiBoard","setAIBoard","aiLastPos","setAiiLastPos","width","height","parts","stones","right","bottom","mapGetter","get","then","response","data","rightS","freshBoard","newBoard","board","getStarterPos","map","singleRow","index1","singleBlock","index2","value","megoldasE","rightCount","bottomCount","bodypartCount","rowCount","length","i","colCount","j","alert","tileClick","x","y","newGrid","JSON","parse","stringify","elozo","solver","megoldas","console","log","display"],"mappings":"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","sourcesContent":["import React,{useEffect, useState, useContext} from 'react'\r\nimport createBoard from '../createBoard';\r\nimport Tile from './Tile'\r\nimport Cell from './Cell'\r\nimport BottomCells from './BottomCells';\r\nimport { ChosenMap } from '../ChosenMap';\r\nimport Axios from \"axios\";\r\nimport '../../App.css'\r\nimport Mestint from '../Mestint';\r\nconst Board = () => {\r\n  const {chosenMap, setChosenMap} = useContext(ChosenMap);\r\n  const [grid,setGrid] = useState([]);\r\n  const [lastPos,setLastPos] = useState([0,0]);\r\n  const [BottomSide,setBottomSide] = useState([0]);\r\n  const [rightSide,setRightSide] = useState([0]);\r\n  const [teste,setTeste]=useState(0);\r\n\r\n  const [aiBoard,setAIBoard] = useState([]);\r\n  const [aiLastPos,setAiiLastPos] = useState([]);\r\n//létre hozzuk a boardot\r\n  useEffect(() =>{\r\n    let width = 5\r\n    let height = 5\r\n    let parts = \"0,0,0,1,0,2,\"\r\n    let stones = \"1,0,1,2,1,4,3,0,\"\r\n    let right = \"3,0,0,0,0\"\r\n    let bottom = \"1,1,1,0,0\"\r\n    function mapGetter(){\r\n      Axios.get(`http://localhost:3001/api/loadMap/${chosenMap}`).then((response) =>{\r\n      width = response.data[0].width\r\n      height = response.data[0].height\r\n      parts = response.data[0].parts\r\n      stones = response.data[0].stones\r\n      right = response.data[0].rightS\r\n      bottom = response.data[0].bottom\r\n\r\n      function freshBoard(){\r\n        const newBoard = createBoard(width, height, parts, stones, right, bottom);\r\n        setAIBoard(newBoard);\r\n        setGrid(newBoard.board);\r\n        setBottomSide(newBoard.bottom);\r\n        setRightSide(newBoard.right);\r\n\r\n        function getStarterPos(){\r\n         newBoard.board.map((singleRow,index1)=>{ \r\n          singleRow.map((singleBlock,index2)=>{ \r\n           if(singleBlock.value === 1){\r\n             setLastPos([index1,index2])\r\n             setAiiLastPos([index1,index2])\r\n           }\r\n          })\r\n         })\r\n\r\n\r\n        }getStarterPos();\r\n      }freshBoard();\r\n      }); \r\n    }mapGetter();\r\n    \r\n  }, []);\r\n  \r\n  const megoldasE = () =>{\r\n    let rightCount = 0;\r\n    let bottomCount = 0;\r\n    let bodypartCount = 0;\r\n    //oldalsó check\r\n    grid.map((singleRow,index1)=>{   \r\n      let rowCount = 0; \r\n        singleRow.map((singleBlock,index2)=>{\r\n         if(singleBlock.value === 1){\r\n          rowCount++;\r\n         } \r\n        })\r\n      if(rowCount === rightSide[index1]){\r\n        rightCount++;\r\n      }\r\n    })\r\n    //alsó check\r\n    if(BottomSide.length>1){\r\n      for(let i = 0; i < BottomSide.length;i++){\r\n        let colCount = 0; \r\n        for(let j = 0; j < rightSide.length;j++){\r\n          if(grid[j][i].value === 1){\r\n            colCount++;\r\n           } \r\n        }\r\n        if(colCount === BottomSide[i]){\r\n          bottomCount++;\r\n        }\r\n      }\r\n    }\r\n    //testresz check\r\n    grid.map((singleRow,index1)=>{   \r\n        singleRow.map((singleBlock,index2)=>{\r\n         if(singleBlock.value === 3){\r\n          bodypartCount++\r\n         } \r\n         if(singleBlock.value === 4){\r\n          bodypartCount++\r\n         } \r\n        })\r\n      \r\n    })\r\n    if( rightCount === rightSide.length && bottomCount === BottomSide.length && bodypartCount === 0){\r\n      alert('win')\r\n    }\r\n  }\r\n  \r\n\r\n  //mezőre kattintás\r\n  const tileClick = (x,y) =>{\r\n    let newGrid = JSON.parse(JSON.stringify(grid));\r\n    let elozo = lastPos;\r\n    if(x === elozo[0]){\r\n    if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 ){\r\n      if(teste === 0){\r\n        if(y + 1 === elozo[1] || y - 1 === elozo[1]){\r\n          newGrid[x][y].value = 1;\r\n          elozo[1] = y;\r\n          setGrid(newGrid);     \r\n        }\r\n      }\r\n      if(teste === 1){\r\n        if(y + 1 === elozo[1] || y - 1 === elozo[1]){\r\n          newGrid[x][y].value = 1;\r\n          elozo[1] = y;\r\n          setGrid(newGrid);     \r\n        }\r\n      }\r\n    }\r\n  }\r\n  if( y === elozo[1]){\r\n    if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 ||newGrid[x][y].value === 4 ){\r\n      if(x + 1 === elozo[0] || x - 1 === elozo[0]){\r\n        newGrid[x][y].value = 1;\r\n        elozo[0] = x;\r\n        setGrid(newGrid);\r\n    }   \r\n    }\r\n    setLastPos(elozo);\r\n  }\r\n  }\r\n//Mestint\r\nconst solver = (x,y) =>{\r\n  let megoldas = Mestint(aiBoard,aiLastPos)\r\n  console.log(megoldas.megoldas.board)\r\n  console.log(grid)\r\n  if(megoldas !== null){\r\n    setGrid(megoldas.megoldas.board)\r\n  }\r\n}\r\n//renderelés\r\n    return ( <div>\r\n    {\r\n      \r\n    grid.map((singleRow,index1)=>{\r\n      return <div style={{display: \"flex\"}} key={index1}>{\r\n        singleRow.map((singleBlock,index2)=>{\r\n          return <Tile details={singleBlock} tileClick={tileClick} key={index2}/>;\r\n        })\r\n      }\r\n           <Cell value={rightSide[index1]}/>    \r\n      </div>\r\n      \r\n      \r\n    })\r\n    \r\n    }\r\n    <BottomCells values={BottomSide}/>\r\n    <div className='container'>\r\n      <button className='gomb' onClick={megoldasE}>Check</button>\r\n    </div>\r\n    <div className='container'>\r\n      <button className='gomb' onClick={solver}>Solve with AI</button>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}