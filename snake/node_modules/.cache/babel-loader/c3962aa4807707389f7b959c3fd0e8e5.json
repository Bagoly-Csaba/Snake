{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\components\\\\homePage\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport createBoard from '../createBoard';\nimport Tile from './Tile';\nimport Cell from './Cell';\nimport BottomCells from './BottomCells';\nimport { ChosenMap } from '../ChosenMap';\nimport Axios from \"axios\";\nimport '../../App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    chosenMap,\n    setChosenMap\n  } = useContext(ChosenMap);\n  const [grid, setGrid] = useState([]);\n  const [lastPos, setLastPos] = useState([0, 0]);\n  const [BottomSide, setBottomSide] = useState([0]);\n  const [rightSide, setRightSide] = useState([0]);\n  const [aiBoard, setAIBoard] = useState([]);\n  const [aiLastPos, setAiiLastPos] = useState([]); //létre hozzuk a boardot\n\n  useEffect(() => {\n    let width = 5;\n    let height = 5;\n    let parts = \"0,0,0,1,0,2,\";\n    let stones = \"1,0,1,2,1,4,3,0,\";\n    let right = \"3,0,0,0,0\";\n    let bottom = \"1,1,1,0,0\";\n\n    function mapGetter() {\n      Axios.get(`http://localhost:3001/api/loadMap/${chosenMap}`).then(response => {\n        width = response.data[0].width;\n        height = response.data[0].height;\n        parts = response.data[0].parts;\n        stones = response.data[0].stones;\n        right = response.data[0].rightS;\n        bottom = response.data[0].bottom;\n\n        function freshBoard() {\n          const newBoard = createBoard(width, height, parts, stones, right, bottom);\n          setAIBoard(newBoard);\n          setGrid(newBoard.board);\n          setBottomSide(newBoard.bottom);\n          setRightSide(newBoard.right);\n\n          function getStarterPos() {\n            newBoard.board.map((singleRow, index1) => {\n              singleRow.map((singleBlock, index2) => {\n                if (singleBlock.value === 1) {\n                  setLastPos([index1, index2]);\n                  setAiiLastPos([index1, index2]);\n                }\n              });\n            });\n          }\n\n          getStarterPos();\n        }\n\n        freshBoard();\n      });\n    }\n\n    mapGetter();\n  }, []);\n\n  const megoldasE = () => {\n    let rightCount = 0;\n    let bottomCount = 0;\n    let bodypartCount = 0; //oldalsó check\n\n    grid.map((singleRow, index1) => {\n      let rowCount = 0;\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 1) {\n          rowCount++;\n        }\n      });\n\n      if (rowCount === rightSide[index1]) {\n        rightCount++;\n      }\n    }); //alsó check\n\n    if (BottomSide.length > 1) {\n      for (let i = 0; i < BottomSide.length; i++) {\n        let colCount = 0;\n\n        for (let j = 0; j < rightSide.length; j++) {\n          if (grid[j][i].value === 1) {\n            colCount++;\n          }\n        }\n\n        if (colCount === BottomSide[i]) {\n          bottomCount++;\n        }\n      }\n    } //testresz check\n\n\n    grid.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 3) {\n          bodypartCount++;\n        }\n\n        if (singleBlock.value === 4) {\n          bodypartCount++;\n        }\n      });\n    });\n\n    if (rightCount === rightSide.length && bottomCount === BottomSide.length && bodypartCount === 0) {\n      alert('win');\n    }\n  }; //mezőre kattintás\n\n\n  const tileClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let elozo = lastPos;\n\n    if (x === elozo[0]) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n        if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n          newGrid[x][y].value = 1;\n          elozo[1] = y;\n          setGrid(newGrid);\n        }\n      }\n    }\n\n    if (y === elozo[1]) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n        if (x + 1 === elozo[0] || x - 1 === elozo[0]) {\n          newGrid[x][y].value = 1;\n          elozo[0] = x;\n          setGrid(newGrid);\n        }\n      }\n\n      setLastPos(elozo);\n    }\n  }; //Mestint\n\n\n  const solver = () => {\n    var palya = aiBoard;\n    palya.pozicio = aiLastPos;\n    palya.atHaladt = false;\n    var adjList = [];\n    var possibleMoves = [[-1, 0], //up\n    [1, 0], //down\n    [0, 1], //right\n    [0, -1] //left\n    ];\n\n    function bejaro() {\n      adjList.push(getPossbleMoves());\n    }\n\n    bejaro();\n\n    function getPossbleMoves() {\n      let moves = [];\n\n      if (palya.pozicio[0] !== 0) {\n        if (palya.board[palya.pozicio[0] - 1][palya.pozicio[1]].value !== 2) {\n          let up = JSON.parse(JSON.stringify(palya));\n          up.board[palya.pozicio[0] - 1][palya.pozicio[1]].value = 1;\n          up.pozicio[0] = palya.pozicio[0] - 1;\n          moves.push(up);\n        }\n      }\n\n      if (palya.pozicio[1] !== 0) {\n        if (palya.board[palya.pozicio[0]][palya.pozicio[1] - 1].value !== 2) {\n          let left = JSON.parse(JSON.stringify(palya));\n          left.board[palya.pozicio[0]][palya.pozicio[1] - 1].value = 1;\n          left.pozicio[1] = left.pozicio[1] - 1;\n\n          function addToList() {\n            moves.push(left);\n          }\n\n          addToList();\n        }\n      }\n\n      if (palya.pozicio[0] !== palya.right.length) {\n        if (palya.board[palya.pozicio[0] + 1][palya.pozicio[1]].value !== 2) {\n          let down = JSON.parse(JSON.stringify(palya));\n          down.board[palya.pozicio[0] + 1][palya.pozicio[1]].value = 1;\n          down.pozicio[0] = palya.pozicio[0] + 1;\n          moves.push(down);\n        }\n      }\n\n      if (palya.pozicio[1] !== palya.bottom.length) {\n        if (palya.board[palya.pozicio[0]][palya.pozicio[1] + 1].value !== 2) {\n          let right = JSON.parse(JSON.stringify(palya));\n          right.board[palya.pozicio[0]][palya.pozicio[1] + 1].value = 1;\n          right.pozicio[1] = palya.pozicio[1] + 1;\n          moves.push(right);\n        }\n      }\n\n      return moves;\n    }\n\n    function isSolution() {\n      let rightCount = 0;\n      let bottomCount = 0;\n      let bodypartCount = 0; //oldalsó check\n\n      palya.board.map((singleRow, index1) => {\n        let rowCount = 0;\n        singleRow.map((singleBlock, index2) => {\n          if (singleBlock.value === 1) {\n            rowCount++;\n          }\n        });\n\n        if (rowCount === rightSide[index1]) {\n          rightCount++;\n        }\n      }); //alsó check\n\n      for (let i = 0; i < palya.bottom.length; i++) {\n        let colCount = 0;\n\n        for (let j = 0; j < palya.right.length; j++) {\n          if (palya.board[j][i].value === 1) {\n            colCount++;\n          }\n        }\n\n        if (colCount === BottomSide[i]) {\n          bottomCount++;\n        }\n      } //testresz check\n\n\n      palya.board.map((singleRow, index1) => {\n        singleRow.map((singleBlock, index2) => {\n          if (singleBlock.value === 3) {\n            bodypartCount++;\n          }\n\n          if (singleBlock.value === 4) {\n            bodypartCount++;\n          }\n        });\n      });\n\n      if (rightCount === palya.right.length && bottomCount === palya.bottom.length && bodypartCount === 0) {\n        alert('win');\n      }\n    } //is solution\n\n\n    console.log(adjList);\n  }; //renderelés\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [grid.map((singleRow, index1) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: [singleRow.map((singleBlock, index2) => {\n          return /*#__PURE__*/_jsxDEV(Tile, {\n            details: singleBlock,\n            tileClick: tileClick\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 18\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Cell, {\n          value: rightSide[index1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 12\n        }, this)]\n      }, index1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 243,\n        columnNumber: 14\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(BottomCells, {\n      values: BottomSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"gomb\",\n        onClick: megoldasE,\n        children: \"Check\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"gomb\",\n        onClick: solver,\n        children: \"Solve with AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Board, \"pvMJeG0vCEU5NwfuSCZMtWTaZRE=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/components/homePage/Board.js"],"names":["React","useEffect","useState","useContext","createBoard","Tile","Cell","BottomCells","ChosenMap","Axios","Board","chosenMap","setChosenMap","grid","setGrid","lastPos","setLastPos","BottomSide","setBottomSide","rightSide","setRightSide","aiBoard","setAIBoard","aiLastPos","setAiiLastPos","width","height","parts","stones","right","bottom","mapGetter","get","then","response","data","rightS","freshBoard","newBoard","board","getStarterPos","map","singleRow","index1","singleBlock","index2","value","megoldasE","rightCount","bottomCount","bodypartCount","rowCount","length","i","colCount","j","alert","tileClick","x","y","newGrid","JSON","parse","stringify","elozo","solver","palya","pozicio","atHaladt","adjList","possibleMoves","bejaro","push","getPossbleMoves","moves","up","left","addToList","down","isSolution","console","log","display"],"mappings":"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","sourcesContent":["import React,{useEffect, useState, useContext} from 'react'\r\nimport createBoard from '../createBoard';\r\nimport Tile from './Tile'\r\nimport Cell from './Cell'\r\nimport BottomCells from './BottomCells';\r\nimport { ChosenMap } from '../ChosenMap';\r\nimport Axios from \"axios\";\r\nimport '../../App.css'\r\nconst Board = () => {\r\n  const {chosenMap, setChosenMap} = useContext(ChosenMap);\r\n  const [grid,setGrid] = useState([]);\r\n  const [lastPos,setLastPos] = useState([0,0]);\r\n  const [BottomSide,setBottomSide] = useState([0]);\r\n  const [rightSide,setRightSide] = useState([0]);\r\n\r\n  const [aiBoard,setAIBoard] = useState([]);\r\n  const [aiLastPos,setAiiLastPos] = useState([]);\r\n//létre hozzuk a boardot\r\n  useEffect(() =>{\r\n    let width = 5\r\n    let height = 5\r\n    let parts = \"0,0,0,1,0,2,\"\r\n    let stones = \"1,0,1,2,1,4,3,0,\"\r\n    let right = \"3,0,0,0,0\"\r\n    let bottom = \"1,1,1,0,0\"\r\n    function mapGetter(){\r\n      Axios.get(`http://localhost:3001/api/loadMap/${chosenMap}`).then((response) =>{\r\n      width = response.data[0].width\r\n      height = response.data[0].height\r\n      parts = response.data[0].parts\r\n      stones = response.data[0].stones\r\n      right = response.data[0].rightS\r\n      bottom = response.data[0].bottom\r\n\r\n      function freshBoard(){\r\n        const newBoard = createBoard(width, height, parts, stones, right, bottom);\r\n        setAIBoard(newBoard);\r\n        setGrid(newBoard.board);\r\n        setBottomSide(newBoard.bottom);\r\n        setRightSide(newBoard.right);\r\n\r\n        function getStarterPos(){\r\n         newBoard.board.map((singleRow,index1)=>{ \r\n          singleRow.map((singleBlock,index2)=>{ \r\n           if(singleBlock.value === 1){\r\n             setLastPos([index1,index2])\r\n             setAiiLastPos([index1,index2])\r\n           }\r\n          })\r\n         })\r\n\r\n\r\n        }getStarterPos();\r\n      }freshBoard();\r\n      }); \r\n    }mapGetter();\r\n    \r\n  }, []);\r\n  \r\n  const megoldasE = () =>{\r\n    let rightCount = 0;\r\n    let bottomCount = 0;\r\n    let bodypartCount = 0;\r\n    //oldalsó check\r\n    grid.map((singleRow,index1)=>{   \r\n      let rowCount = 0; \r\n        singleRow.map((singleBlock,index2)=>{\r\n         if(singleBlock.value === 1){\r\n          rowCount++;\r\n         } \r\n        })\r\n      if(rowCount === rightSide[index1]){\r\n        rightCount++;\r\n      }\r\n    })\r\n    //alsó check\r\n    if(BottomSide.length>1){\r\n      for(let i = 0; i < BottomSide.length;i++){\r\n        let colCount = 0; \r\n        for(let j = 0; j < rightSide.length;j++){\r\n          if(grid[j][i].value === 1){\r\n            colCount++;\r\n           } \r\n        }\r\n        if(colCount === BottomSide[i]){\r\n          bottomCount++;\r\n        }\r\n      }\r\n    }\r\n    //testresz check\r\n    grid.map((singleRow,index1)=>{   \r\n        singleRow.map((singleBlock,index2)=>{\r\n         if(singleBlock.value === 3){\r\n          bodypartCount++\r\n         } \r\n         if(singleBlock.value === 4){\r\n          bodypartCount++\r\n         } \r\n        })\r\n      \r\n    })\r\n    if( rightCount === rightSide.length && bottomCount === BottomSide.length && bodypartCount === 0){\r\n      alert('win')\r\n    }\r\n  }\r\n  \r\n\r\n  //mezőre kattintás\r\n  const tileClick = (x,y) =>{\r\n    let newGrid = JSON.parse(JSON.stringify(grid));\r\n    let elozo = lastPos;\r\n    if(x === elozo[0]){\r\n    if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 ||newGrid[x][y].value === 4 ){\r\n      if(y + 1 === elozo[1] || y - 1 === elozo[1]){\r\n        newGrid[x][y].value = 1;\r\n        elozo[1] = y;\r\n        setGrid(newGrid);\r\n        \r\n      }   \r\n    }\r\n  }\r\n  if( y === elozo[1]){\r\n    if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 ||newGrid[x][y].value === 4 ){\r\n      if(x + 1 === elozo[0] || x - 1 === elozo[0]){\r\n        newGrid[x][y].value = 1;\r\n        elozo[0] = x;\r\n        setGrid(newGrid);\r\n    }   \r\n    }\r\n    setLastPos(elozo);\r\n  }\r\n  }\r\n//Mestint\r\n  const solver = () =>{\r\n    \r\n    var palya = aiBoard\r\n    palya.pozicio = aiLastPos\r\n    palya.atHaladt = false\r\n    var adjList = [];\r\n    var possibleMoves =[\r\n      [-1,0], //up\r\n      [1,0], //down\r\n      [0,1], //right\r\n      [0,-1], //left\r\n    ];\r\n    function bejaro(){\r\n      adjList.push(getPossbleMoves());\r\n    }bejaro();\r\n    function getPossbleMoves(){\r\n      let moves = []\r\n      if(palya.pozicio[0] !== 0){\r\n        if(palya.board[palya.pozicio[0] - 1][palya.pozicio[1]].value !== 2 ){\r\n          let  up = JSON.parse(JSON.stringify(palya));\r\n        up.board[palya.pozicio[0] - 1][palya.pozicio[1]].value = 1;\r\n        up.pozicio[0] = palya.pozicio[0] - 1;\r\n        moves.push(up);\r\n        }\r\n      }\r\n      if(palya.pozicio[1] !== 0){\r\n        if(palya.board[palya.pozicio[0]][palya.pozicio[1] - 1].value !== 2){\r\n          let  left = JSON.parse(JSON.stringify(palya));\r\n          left.board[palya.pozicio[0]][palya.pozicio[1] - 1].value = 1;\r\n          left.pozicio[1] = left.pozicio[1] - 1;\r\n          function addToList(){\r\n            moves.push(left);\r\n          }addToList()\r\n          \r\n        }\r\n      }\r\n      if(palya.pozicio[0] !== palya.right.length){\r\n          if(palya.board[palya.pozicio[0] + 1][palya.pozicio[1]].value !== 2 ){\r\n            let  down = JSON.parse(JSON.stringify(palya));\r\n            down.board[palya.pozicio[0] + 1][palya.pozicio[1]].value = 1;\r\n            down.pozicio[0] = palya.pozicio[0] + 1;\r\n            moves.push(down);\r\n          }   \r\n        }\r\n      if(palya.pozicio[1] !== palya.bottom.length){\r\n          if(palya.board[palya.pozicio[0]][palya.pozicio[1] + 1].value !== 2){\r\n              let  right = JSON.parse(JSON.stringify(palya));\r\n              right.board[palya.pozicio[0]][palya.pozicio[1] + 1].value = 1;\r\n              right.pozicio[1] = palya.pozicio[1] + 1;\r\n              moves.push(right);\r\n          }\r\n      }\r\n      return moves;  \r\n    }\r\n\r\n    function isSolution(){\r\n      let rightCount = 0;\r\n      let bottomCount = 0;\r\n      let bodypartCount = 0;\r\n      //oldalsó check\r\n      palya.board.map((singleRow,index1)=>{   \r\n        let rowCount = 0; \r\n          singleRow.map((singleBlock,index2)=>{\r\n          if(singleBlock.value === 1){\r\n            rowCount++;\r\n          } \r\n          })\r\n        if(rowCount === rightSide[index1]){\r\n          rightCount++;\r\n        }\r\n      })\r\n      //alsó check\r\n        for(let i = 0; i < palya.bottom.length;i++){\r\n          let colCount = 0; \r\n          for(let j = 0; j < palya.right.length;j++){\r\n            if(palya.board[j][i].value === 1){\r\n              colCount++;\r\n            } \r\n          }\r\n          if(colCount === BottomSide[i]){\r\n            bottomCount++;\r\n          }\r\n        }\r\n      \r\n      //testresz check\r\n      palya.board.map((singleRow,index1)=>{   \r\n          singleRow.map((singleBlock,index2)=>{\r\n          if(singleBlock.value === 3){\r\n            bodypartCount++\r\n          } \r\n          if(singleBlock.value === 4){\r\n            bodypartCount++\r\n          } \r\n          })\r\n        \r\n      })\r\n      if( rightCount === palya.right.length && bottomCount === palya.bottom.length && bodypartCount === 0){\r\n        alert('win')\r\n      }\r\n    }//is solution\r\n    console.log(adjList);\r\n  }\r\n\r\n\r\n//renderelés\r\n    return ( <div>\r\n    {\r\n      \r\n    grid.map((singleRow,index1)=>{\r\n      return <div style={{display: \"flex\"}} key={index1}>{\r\n        singleRow.map((singleBlock,index2)=>{\r\n          return <Tile details={singleBlock} tileClick={tileClick} key={index2}/>;\r\n        })\r\n      }\r\n           <Cell value={rightSide[index1]}/>    \r\n      </div>\r\n      \r\n      \r\n    })\r\n    \r\n    }\r\n    <BottomCells values={BottomSide}/>\r\n    <div className='container'>\r\n      <button className='gomb' onClick={megoldasE}>Check</button>\r\n    </div>\r\n    <div className='container'>\r\n      <button className='gomb' onClick={solver}>Solve with AI</button>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}