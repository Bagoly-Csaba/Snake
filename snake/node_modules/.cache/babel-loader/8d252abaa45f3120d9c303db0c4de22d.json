{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\pages\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Component, useRef, useEffect } from 'react';\nimport createBoardCreator from '../components/createPage/createBoardCreator';\nimport CreatorTile from '../components/createPage/CreatorTile';\nimport CreatorCell from '../components/createPage/CreatorCell';\nimport CreatorBottomCells from '../components/createPage/CreatorBottomCells';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Create() {\n  _s();\n\n  const [activeCard, setActiveCard] = useState(0);\n  const [board, setBoard] = useState([]);\n  const [grid, setGrid] = useState([]);\n  const [width, setWidth] = useState(3);\n  const [height, setHeight] = useState(3);\n  const [bodyPart, setBodyPart] = useState(0);\n  const [lastPos, setLastPos] = useState([0, 0]);\n  const [savedBoard, setSavedBoard] = useState([]);\n  const [buildStade, setBuildStade] = useState(0);\n  useEffect(() => {\n    function freshBoard(row, col) {\n      const newBoard = createBoardCreator(row, col);\n      setBoard(newBoard);\n      setGrid(newBoard.board);\n    }\n\n    freshBoard(height, width);\n  }, [height]);\n\n  const tileClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let elozo = lastPos;\n\n    if (bodyPart === 1) {\n      setLastPos([x, y]);\n    }\n\n    if (bodyPart === 5) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 && x === elozo[0]) {\n        if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n          newGrid[x][y].value = 5;\n          elozo[1] = y;\n          setGrid(newGrid);\n        }\n      }\n\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 && y === elozo[1]) {\n        if (x + 1 === elozo[0] || x - 1 === elozo[0]) {\n          newGrid[x][y].value = 5;\n          elozo[0] = x;\n          setGrid(newGrid);\n        }\n      }\n\n      setLastPos(elozo);\n    } else {\n      newGrid[x][y].value = bodyPart;\n      newBoard.board = newGrid;\n    }\n\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }; //bal click event\n\n\n  const tileRightClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newGrid[x][y].value = 2;\n    newBoard.board = newGrid;\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }; //el menti a testrészeket és át vált a test berajzolására\n\n\n  const saveMap = () => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let fej = 0;\n    let test = 0;\n    let farok = 0;\n    newGrid.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 1) {\n          fej++;\n        }\n\n        if (singleBlock.value === 3) {\n          test++;\n        }\n\n        if (singleBlock.value === 4) {\n          farok++;\n        }\n      });\n    });\n\n    if (fej === 1 && test === 1 && farok === 1) {\n      setSavedBoard(newGrid);\n      setBuildStade(1);\n    } else {\n      alert('ther can only be 1 of every body part and there has to be one of every bodypart');\n    }\n  };\n\n  const submitMap = () => {\n    //testrészek és kövek mentése\n    let stones = '';\n    let parts = '';\n    let head = '';\n    let body = '';\n    let tail = '';\n    savedBoard.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 2) {\n          stones = stones + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 1) {\n          head = head + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 3) {\n          body = body + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 4) {\n          tail = tail + index1 + ',' + index2 + ',';\n        }\n      });\n    });\n    parts = head + body + tail; //oldalak számolása\n    //jobb oldal\n\n    let right = [];\n    let bottom = [];\n    savedBoard.map((singleRow, index1) => {\n      let counter = 0;\n      singleRow.map((singleBlock, index2) => {\n        if (grid[index1][index2].value === 5 || grid[index1][index2].value === 1) {\n          counter++;\n        }\n      });\n      right.push(counter);\n    });\n    console.log(right); //bal oldal\n    //map mentése\n\n    Axios.post(\"http://localhost:3001/api/insertMap\", {\n      name: 'test',\n      width: width,\n      height: height,\n      parts: parts,\n      stones: stones,\n      uploaded_by: 'bob'\n    }).then(() => {\n      alert(\"success\");\n    });\n  }; //rendelelés\n  //map méret bekérés\n\n\n  if (activeCard === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"width :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 163,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          onChange: event => setWidth(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 164,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"height :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 165,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          onChange: event => setHeight(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveCard(1);\n            },\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 170,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 169,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 162,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 5\n    }, this);\n  } //kövek és test részek be rajzolása\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [grid.map((singleRow, index1) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: singleRow.map((singleBlock, index2) => {\n          return /*#__PURE__*/_jsxDEV(CreatorTile, {\n            details: singleBlock,\n            tileClick: tileClick,\n            tileRightClick: tileRightClick\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 184,\n            columnNumber: 17\n          }, this);\n        })\n      }, index1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 182,\n        columnNumber: 18\n      }, this);\n    }), buildStade === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(1),\n        children: \"Head\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(3),\n        children: \"Body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(4),\n        children: \"Tail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(0),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            saveMap();\n            setBodyPart(5);\n          },\n          children: \"draw the snake\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          console.log(board);\n        },\n        children: \"save map\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: submitMap,\n        children: \"save map and play\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 8\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Create, \"Ds2GdZJ7XG7YZP7bcOjJep9sKDs=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/pages/Create.js"],"names":["React","useState","Component","useRef","useEffect","createBoardCreator","CreatorTile","CreatorCell","CreatorBottomCells","Axios","Create","activeCard","setActiveCard","board","setBoard","grid","setGrid","width","setWidth","height","setHeight","bodyPart","setBodyPart","lastPos","setLastPos","savedBoard","setSavedBoard","buildStade","setBuildStade","freshBoard","row","col","newBoard","tileClick","x","y","newGrid","JSON","parse","stringify","elozo","value","tileRightClick","saveMap","fej","test","farok","map","singleRow","index1","singleBlock","index2","alert","submitMap","stones","parts","head","body","tail","right","bottom","counter","push","console","log","post","name","uploaded_by","then","event","target","display"],"mappings":"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","sourcesContent":["import React, {useState,Component, useRef, useEffect } from 'react';\nimport createBoardCreator from '../components/createPage/createBoardCreator';\nimport CreatorTile from '../components/createPage/CreatorTile';\nimport CreatorCell from '../components/createPage/CreatorCell';\nimport CreatorBottomCells from '../components/createPage/CreatorBottomCells';\nimport  Axios  from 'axios';\nfunction Create() {\n  const [activeCard, setActiveCard] = useState(0);\n  const [board,setBoard] = useState([]);\n  const [grid,setGrid] = useState([]);\n  const [width,setWidth] = useState(3);\n  const [height,setHeight] = useState(3);\n  const [bodyPart,setBodyPart] = useState(0);\n  const [lastPos,setLastPos] = useState([0,0]);\n  const [savedBoard,setSavedBoard] = useState([]);\n  const [buildStade, setBuildStade] = useState(0);\n\n  useEffect(()=>{\n  function freshBoard (row,col){\n    const newBoard = createBoardCreator(row, col);\n      setBoard(newBoard);\n    setGrid(newBoard.board);\n  }freshBoard(height,width)\n},[height]);\n\n  const tileClick = (x,y) =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let elozo = lastPos;\n\n    if(bodyPart === 1){\n      setLastPos([x,y])\n    }\n    if(bodyPart === 5){\n\n      if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 && x === elozo[0]){\n        if(y + 1 === elozo[1] || y - 1 === elozo[1]){\n            newGrid[x][y].value = 5;\n            elozo[1] = y;\n            setGrid(newGrid);\n            \n          }   \n      }\n      if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 && y === elozo[1]){\n          if(x + 1 === elozo[0] || x - 1 === elozo[0]){\n            newGrid[x][y].value = 5;\n            elozo[0] = x;\n            setGrid(newGrid);\n        }   \n      }\n      setLastPos(elozo);\n    }\n    else{\n    newGrid[x][y].value = bodyPart;\n    newBoard.board = newGrid;\n    }\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }\n  //bal click event\n  const tileRightClick = (x,y) =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newGrid[x][y].value = 2;\n    newBoard.board = newGrid;\n    setGrid(newGrid);\n    setBoard(newBoard);\n   \n  }\n//el menti a testrészeket és át vált a test berajzolására\n  const saveMap = () =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let fej = 0\n    let test = 0\n    let farok = 0\n\n    newGrid.map((singleRow,index1)=>{\n      singleRow.map((singleBlock,index2)=>{\n        if(singleBlock.value === 1 ){\n          fej++\n        }\n        if(singleBlock.value === 3 ){\n          test++\n        }\n        if(singleBlock.value === 4 ){\n          farok++\n        }\n      })\n    })\n    if(fej === 1 && test === 1 && farok === 1){\n      \n      setSavedBoard(newGrid);\n      setBuildStade(1)\n    }\n    else{\n      alert('ther can only be 1 of every body part and there has to be one of every bodypart')\n      \n    }\n\n    \n  }\n\n\n  const submitMap = () =>{\n  //testrészek és kövek mentése\n    let stones = ''\n    let parts = ''\n    let head = ''\n    let body = ''\n    let tail = ''\n    savedBoard.map((singleRow,index1)=>{\n      singleRow.map((singleBlock,index2)=>{\n        if(singleBlock.value === 2 ){\n          stones = stones + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 1 ){\n          head = head + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 3 ){\n          body = body + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 4 ){\n          tail = tail + index1 + ',' + index2 + ','\n        }\n      })\n    })\n    parts = head + body + tail \n//oldalak számolása\n    //jobb oldal\n    let right = []\n    let bottom = []\n    savedBoard.map((singleRow,index1)=>{\n      let counter = 0\n      singleRow.map((singleBlock,index2)=>{\n        if(grid[index1][index2].value === 5 || grid[index1][index2].value === 1){\n          counter++\n        }\n      })\n      right.push(counter);\n    })\n    console.log(right)\n    //bal oldal\n    \n//map mentése\n    Axios.post(\"http://localhost:3001/api/insertMap\",{\n      name:'test',\n      width:width,\n      height:height,\n      parts:parts,\n      stones:stones,\n      uploaded_by:'bob',\n  }).then(()=>{\n    alert(\"success\");\n  });\n  };\n\n//rendelelés\n//map méret bekérés\n  if(activeCard === 0){\n  return (\n    <div className='create'>\n      <div className='form'>\n      <label>width :</label>\n       <input type=\"number\" name=\"width\" onChange={event => setWidth(event.target.value)} />\n       <label>height :</label>\n       <input type=\"number\" name=\"height\"onChange={event => setHeight(event.target.value)} />\n      \n        \n        <div>\n        <button onClick={() => { setActiveCard(1) } }>Done</button>\n        </div>\n      </div>\n       \n    </div>\n  )\n  }\n//kövek és test részek be rajzolása\n  return( \n    <div>\n      {\n        grid.map((singleRow,index1)=>{\n          return <div style={{display: \"flex\"}} key={index1}>{\n           singleRow.map((singleBlock,index2)=>{\n         return <CreatorTile details={singleBlock} tileClick={tileClick} tileRightClick={tileRightClick} key={index2}/>\n      })\n      }\n       \n          </div> \n        })\n        \n      }\n      \n      {buildStade === 0\n      ? <div>\n        <button onClick={() =>setBodyPart(1)}>Head</button>\n        <button onClick={() =>setBodyPart(3)}>Body</button>\n        <button onClick={() =>setBodyPart(4)}>Tail</button>\n        <button onClick={() =>setBodyPart(0)}>Delete</button>\n        <div>\n          <button onClick={() =>{saveMap();setBodyPart(5)}}>draw the snake</button>\n      </div>\n      </div>\n     \n    \n     : <div>\n      <button onClick={() =>{console.log(board)}}>save map</button>\n      <button onClick={submitMap}>save map and play</button>\n      </div>\n      }\n\n    </div>\n  )\n}\n\nexport default Create;\n"]},"metadata":{},"sourceType":"module"}