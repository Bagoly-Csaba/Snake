{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\components\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport Tile from './Tile';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  //létre hozzuk a boardot\n  let createBoard = (row, col) => {\n    let board = [];\n\n    for (let x = 0; x < row; x++) {\n      let subCol = [];\n\n      for (let y = 0; y < col; y++) {\n        subCol.push({\n          value: 1,\n          revealed: false,\n          x: x,\n          y: y\n        });\n      }\n\n      board.push(subCol);\n    }\n\n    return board;\n  };\n\n  const [grid, setGrid] = useState([]);\n  useEffect(() => {\n    function freshBoard() {\n      const newBoard = createBoard(5, 5);\n      console.log(newBoard);\n      setGrid(newBoard);\n    }\n\n    freshBoard();\n  }, []);\n  console.log(grid.board);\n\n  if (!grid.board) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"loading\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 14\n    }, this);\n  }\n\n  return grid.board.map(singleRow => {\n    return singleRow.map(singleBlock => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        children: singleBlock.value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 16\n      }, this);\n    });\n  });\n};\n\n_s(Board, \"owlWVbES+DCGU/3HWNCJxd3FI3E=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/components/Board.js"],"names":["React","useEffect","useState","Tile","Board","createBoard","row","col","board","x","subCol","y","push","value","revealed","grid","setGrid","freshBoard","newBoard","console","log","map","singleRow","singleBlock"],"mappings":";;;AAAA,OAAOA,KAAP,IAAcC,SAAd,EAAyBC,QAAzB,QAAwC,OAAxC;AACA,OAAOC,IAAP,MAAiB,QAAjB;;;AACA,MAAMC,KAAK,GAAG,MAAM;AAAA;;AAClB;AACA,MAAKC,WAAW,GAAE,CAACC,GAAD,EAAMC,GAAN,KAAc;AAC9B,QAAIC,KAAK,GAAG,EAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,GAApB,EAAyBG,CAAC,EAA1B,EAA8B;AAC5B,UAAIC,MAAM,GAAG,EAAb;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,GAApB,EAAyBI,CAAC,EAA1B,EAA8B;AAC5BD,QAAAA,MAAM,CAACE,IAAP,CAAY;AACVC,UAAAA,KAAK,EAAE,CADG;AAEVC,UAAAA,QAAQ,EAAE,KAFA;AAGVL,UAAAA,CAAC,EAAEA,CAHO;AAIVE,UAAAA,CAAC,EAAEA;AAJO,SAAZ;AAMD;;AACDH,MAAAA,KAAK,CAACI,IAAN,CAAWF,MAAX;AACD;;AAED,WAAOF,KAAP;AACD,GAjBD;;AAmBA,QAAM,CAACO,IAAD,EAAMC,OAAN,IAAiBd,QAAQ,CAAC,EAAD,CAA/B;AAEAD,EAAAA,SAAS,CAAC,MAAK;AACb,aAASgB,UAAT,GAAqB;AACrB,YAAMC,QAAQ,GAAGb,WAAW,CAAC,CAAD,EAAG,CAAH,CAA5B;AACAc,MAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;AACAF,MAAAA,OAAO,CAACE,QAAD,CAAP;AACC;;AAAAD,IAAAA,UAAU;AACZ,GANQ,EAMN,EANM,CAAT;AAODE,EAAAA,OAAO,CAACC,GAAR,CAAYL,IAAI,CAACP,KAAjB;;AACG,MAAG,CAACO,IAAI,CAACP,KAAT,EAAe;AACb,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD;;AACD,SAAOO,IAAI,CAACP,KAAL,CAAWa,GAAX,CAAgBC,SAAD,IAAa;AACjC,WAAOA,SAAS,CAACD,GAAV,CAAeE,WAAD,IAAe;AAClC,0BAAO;AAAA,kBAAMA,WAAW,CAACV;AAAlB;AAAA;AAAA;AAAA;AAAA,cAAP;AAEH,KAHQ,CAAP;AAIH,GALQ,CAAP;AAMH,CAxCD;;GAAMT,K;;KAAAA,K;AA2CN,eAAeA,KAAf","sourcesContent":["import React,{useEffect, useState} from 'react'\r\nimport Tile from './Tile'\r\nconst Board = () => {\r\n  //létre hozzuk a boardot\r\n  let  createBoard= (row, col) => {\r\n    let board = [];\r\n\r\n    for (let x = 0; x < row; x++) {\r\n      let subCol = [];\r\n      for (let y = 0; y < col; y++) {\r\n        subCol.push({\r\n          value: 1,\r\n          revealed: false,\r\n          x: x,\r\n          y: y,\r\n        });\r\n      }\r\n      board.push(subCol);\r\n    }\r\n    \r\n    return board;\r\n  };\r\n\r\n  const [grid,setGrid] = useState([]);\r\n\r\n  useEffect(() =>{\r\n    function freshBoard(){\r\n    const newBoard = createBoard(5,5);\r\n    console.log(newBoard);\r\n    setGrid(newBoard);\r\n    }freshBoard();\r\n  }, []);\r\n console.log(grid.board);\r\n    if(!grid.board){\r\n      return <div>loading</div>\r\n    }\r\n    return grid.board.map((singleRow)=>{\r\n      return singleRow.map((singleBlock)=>{\r\n        return <div>{singleBlock.value}</div>;\r\n     \r\n    });\r\n  });\r\n}\r\n\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}