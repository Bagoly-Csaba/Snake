{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\pages\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Component, useRef, useEffect } from 'react';\nimport createBoardCreator from '../components/createPage/createBoardCreator';\nimport CreatorTile from '../components/createPage/CreatorTile';\nimport CreatorCell from '../components/createPage/CreatorCell';\nimport CreatorBottomCells from '../components/createPage/CreatorBottomCells';\nimport Axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Create() {\n  _s();\n\n  const [activeCard, setActiveCard] = useState(0);\n  const [board, setBoard] = useState([]);\n  const [grid, setGrid] = useState([]);\n  const [width, setWidth] = useState(3);\n  const [height, setHeight] = useState(3);\n  const [bodyPart, setBodyPart] = useState(0);\n  const [lastPos, setLastPos] = useState([0, 0]);\n  useEffect(() => {\n    function freshBoard(row, col) {\n      const newBoard = createBoardCreator(row, col);\n      setBoard(newBoard);\n      setGrid(newBoard.board);\n    }\n\n    freshBoard(height, width);\n  }, [height]);\n\n  const tileClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let elozo = lastPos;\n\n    if (bodyPart === 1) {\n      setLastPos([x, y]);\n    }\n\n    if (bodyPart === 5) {\n      if (newGrid[x][y].value === 0 && x === elozo[0]) {\n        if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n          newGrid[x][y].value = 5;\n          elozo[1] = y;\n          setGrid(newGrid);\n        }\n      }\n\n      if (newGrid[x][y].value === 0 && y === elozo[1]) {\n        if (x + 1 === elozo[0] || x - 1 === elozo[0]) {\n          newGrid[x][y].value = 5;\n          elozo[0] = x;\n          setGrid(newGrid);\n        }\n      }\n\n      setLastPos(elozo);\n    } else {\n      newGrid[x][y].value = bodyPart;\n      newBoard.board = newGrid;\n    }\n\n    setGrid(newGrid);\n    setBoard(newBoard);\n  };\n\n  const tileRightClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newGrid[x][y].value = 2;\n    newBoard.board = newGrid;\n    setGrid(newGrid);\n    setBoard(newBoard);\n  };\n\n  const CellChange = (x, value) => {\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newBoard.right[x] = 1;\n    setBoard(newBoard);\n  };\n\n  const submitMap = () => {\n    let stones = '';\n    let parts = '';\n    let head = '';\n    let body = '';\n    let tail = '';\n    grid.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 2) {\n          stones = stones + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 1) {\n          head = head + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 3) {\n          body = body + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 4) {\n          tail = tail + index1 + ',' + index2 + ',';\n        }\n      });\n    });\n    parts = head + body + tail;\n    Axios.post(\"http://localhost:3001/api/insertMap\", {\n      name: 'test',\n      width: width,\n      height: height,\n      parts: parts,\n      stones: stones,\n      uploaded_by: 'bob'\n    }).then(() => {\n      alert(\"success\");\n    });\n  };\n\n  if (activeCard === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"width :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"width\",\n          onChange: event => setWidth(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n          children: \"height :\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 111,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"number\",\n          name: \"height\",\n          onChange: event => setHeight(event.target.value)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setActiveCard(1);\n            },\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 116,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 5\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [grid.map((singleRow, index1) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: singleRow.map((singleBlock, index2) => {\n          return /*#__PURE__*/_jsxDEV(CreatorTile, {\n            details: singleBlock,\n            tileClick: tileClick,\n            tileRightClick: tileRightClick\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 17\n          }, this);\n        })\n      }, index1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 18\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(1),\n        children: \"Head\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 142,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(3),\n        children: \"Body\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(4),\n        children: \"Tail\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(0),\n        children: \"Delete\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setBodyPart(5),\n        children: \"draw the snake\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => {\n        console.log(board);\n      },\n      children: \"save map\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: submitMap,\n      children: \"save map and play\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Create, \"HAaz8QzZ89N2HnIiuqP6rzipuqw=\");\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/pages/Create.js"],"names":["React","useState","Component","useRef","useEffect","createBoardCreator","CreatorTile","CreatorCell","CreatorBottomCells","Axios","Create","activeCard","setActiveCard","board","setBoard","grid","setGrid","width","setWidth","height","setHeight","bodyPart","setBodyPart","lastPos","setLastPos","freshBoard","row","col","newBoard","tileClick","x","y","newGrid","JSON","parse","stringify","elozo","value","tileRightClick","CellChange","right","submitMap","stones","parts","head","body","tail","map","singleRow","index1","singleBlock","index2","post","name","uploaded_by","then","alert","event","target","display","console","log"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,EAAwBC,SAAxB,EAAmCC,MAAnC,EAA2CC,SAA3C,QAA4D,OAA5D;AACA,OAAOC,kBAAP,MAA+B,6CAA/B;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,WAAP,MAAwB,sCAAxB;AACA,OAAOC,kBAAP,MAA+B,6CAA/B;AACA,OAAQC,KAAR,MAAoB,OAApB;;;AACA,SAASC,MAAT,GAAkB;AAAA;;AAChB,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAACY,KAAD,EAAOC,QAAP,IAAmBb,QAAQ,CAAC,EAAD,CAAjC;AACA,QAAM,CAACc,IAAD,EAAMC,OAAN,IAAiBf,QAAQ,CAAC,EAAD,CAA/B;AACA,QAAM,CAACgB,KAAD,EAAOC,QAAP,IAAmBjB,QAAQ,CAAC,CAAD,CAAjC;AACA,QAAM,CAACkB,MAAD,EAAQC,SAAR,IAAqBnB,QAAQ,CAAC,CAAD,CAAnC;AACA,QAAM,CAACoB,QAAD,EAAUC,WAAV,IAAyBrB,QAAQ,CAAC,CAAD,CAAvC;AACA,QAAM,CAACsB,OAAD,EAASC,UAAT,IAAuBvB,QAAQ,CAAC,CAAC,CAAD,EAAG,CAAH,CAAD,CAArC;AAEAG,EAAAA,SAAS,CAAC,MAAI;AACd,aAASqB,UAAT,CAAqBC,GAArB,EAAyBC,GAAzB,EAA6B;AAC3B,YAAMC,QAAQ,GAAGvB,kBAAkB,CAACqB,GAAD,EAAMC,GAAN,CAAnC;AACEb,MAAAA,QAAQ,CAACc,QAAD,CAAR;AACFZ,MAAAA,OAAO,CAACY,QAAQ,CAACf,KAAV,CAAP;AACD;;AAAAY,IAAAA,UAAU,CAACN,MAAD,EAAQF,KAAR,CAAV;AACF,GANU,EAMT,CAACE,MAAD,CANS,CAAT;;AAQA,QAAMU,SAAS,GAAG,CAACC,CAAD,EAAGC,CAAH,KAAQ;AACxB,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAepB,IAAf,CAAX,CAAd;AACA,QAAIa,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,KAAf,CAAX,CAAf;AACA,QAAIuB,KAAK,GAAGb,OAAZ;;AAEA,QAAGF,QAAQ,KAAK,CAAhB,EAAkB;AAChBG,MAAAA,UAAU,CAAC,CAACM,CAAD,EAAGC,CAAH,CAAD,CAAV;AACD;;AACD,QAAGV,QAAQ,KAAK,CAAhB,EAAkB;AAEhB,UAAGW,OAAO,CAACF,CAAD,CAAP,CAAWC,CAAX,EAAcM,KAAd,KAAwB,CAAxB,IAA6BP,CAAC,KAAKM,KAAK,CAAC,CAAD,CAA3C,EAA+C;AAC7C,YAAGL,CAAC,GAAG,CAAJ,KAAUK,KAAK,CAAC,CAAD,CAAf,IAAsBL,CAAC,GAAG,CAAJ,KAAUK,KAAK,CAAC,CAAD,CAAxC,EAA4C;AACxCJ,UAAAA,OAAO,CAACF,CAAD,CAAP,CAAWC,CAAX,EAAcM,KAAd,GAAsB,CAAtB;AACAD,UAAAA,KAAK,CAAC,CAAD,CAAL,GAAWL,CAAX;AACAf,UAAAA,OAAO,CAACgB,OAAD,CAAP;AAED;AACJ;;AACD,UAAGA,OAAO,CAACF,CAAD,CAAP,CAAWC,CAAX,EAAcM,KAAd,KAAwB,CAAxB,IAA6BN,CAAC,KAAKK,KAAK,CAAC,CAAD,CAA3C,EAA+C;AAC3C,YAAGN,CAAC,GAAG,CAAJ,KAAUM,KAAK,CAAC,CAAD,CAAf,IAAsBN,CAAC,GAAG,CAAJ,KAAUM,KAAK,CAAC,CAAD,CAAxC,EAA4C;AAC1CJ,UAAAA,OAAO,CAACF,CAAD,CAAP,CAAWC,CAAX,EAAcM,KAAd,GAAsB,CAAtB;AACAD,UAAAA,KAAK,CAAC,CAAD,CAAL,GAAWN,CAAX;AACAd,UAAAA,OAAO,CAACgB,OAAD,CAAP;AACH;AACF;;AACDR,MAAAA,UAAU,CAACY,KAAD,CAAV;AACD,KAlBD,MAmBI;AACJJ,MAAAA,OAAO,CAACF,CAAD,CAAP,CAAWC,CAAX,EAAcM,KAAd,GAAsBhB,QAAtB;AACAO,MAAAA,QAAQ,CAACf,KAAT,GAAiBmB,OAAjB;AACC;;AACDhB,IAAAA,OAAO,CAACgB,OAAD,CAAP;AACAlB,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACD,GAjCD;;AAkCA,QAAMU,cAAc,GAAG,CAACR,CAAD,EAAGC,CAAH,KAAQ;AAC7B,QAAIC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAepB,IAAf,CAAX,CAAd;AACA,QAAIa,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,KAAf,CAAX,CAAf;AACAmB,IAAAA,OAAO,CAACF,CAAD,CAAP,CAAWC,CAAX,EAAcM,KAAd,GAAsB,CAAtB;AACAT,IAAAA,QAAQ,CAACf,KAAT,GAAiBmB,OAAjB;AACAhB,IAAAA,OAAO,CAACgB,OAAD,CAAP;AACAlB,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACD,GAPD;;AAQA,QAAMW,UAAU,GAAG,CAACT,CAAD,EAAGO,KAAH,KAAY;AAC7B,QAAIT,QAAQ,GAAGK,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAetB,KAAf,CAAX,CAAf;AACAe,IAAAA,QAAQ,CAACY,KAAT,CAAeV,CAAf,IAAoB,CAApB;AACAhB,IAAAA,QAAQ,CAACc,QAAD,CAAR;AACD,GAJD;;AAKA,QAAMa,SAAS,GAAG,MAAK;AACrB,QAAIC,MAAM,GAAG,EAAb;AACA,QAAIC,KAAK,GAAG,EAAZ;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,IAAI,GAAG,EAAX;AACA/B,IAAAA,IAAI,CAACgC,GAAL,CAAS,CAACC,SAAD,EAAWC,MAAX,KAAoB;AAC3BD,MAAAA,SAAS,CAACD,GAAV,CAAc,CAACG,WAAD,EAAaC,MAAb,KAAsB;AAClC,YAAGD,WAAW,CAACb,KAAZ,KAAsB,CAAzB,EAA4B;AAC1BK,UAAAA,MAAM,GAAGA,MAAM,GAAGO,MAAT,GAAkB,GAAlB,GAAwBE,MAAxB,GAAiC,GAA1C;AACD;;AACD,YAAGD,WAAW,CAACb,KAAZ,KAAsB,CAAzB,EAA4B;AAC1BO,UAAAA,IAAI,GAAGA,IAAI,GAAGK,MAAP,GAAgB,GAAhB,GAAsBE,MAAtB,GAA+B,GAAtC;AACD;;AACD,YAAGD,WAAW,CAACb,KAAZ,KAAsB,CAAzB,EAA4B;AAC1BQ,UAAAA,IAAI,GAAGA,IAAI,GAAGI,MAAP,GAAgB,GAAhB,GAAsBE,MAAtB,GAA+B,GAAtC;AACD;;AACD,YAAGD,WAAW,CAACb,KAAZ,KAAsB,CAAzB,EAA4B;AAC1BS,UAAAA,IAAI,GAAGA,IAAI,GAAGG,MAAP,GAAgB,GAAhB,GAAsBE,MAAtB,GAA+B,GAAtC;AACD;AACF,OAbD;AAcD,KAfD;AAgBAR,IAAAA,KAAK,GAAGC,IAAI,GAAGC,IAAP,GAAcC,IAAtB;AACArC,IAAAA,KAAK,CAAC2C,IAAN,CAAW,qCAAX,EAAiD;AAC/CC,MAAAA,IAAI,EAAC,MAD0C;AAE/CpC,MAAAA,KAAK,EAACA,KAFyC;AAG/CE,MAAAA,MAAM,EAACA,MAHwC;AAI/CwB,MAAAA,KAAK,EAACA,KAJyC;AAK/CD,MAAAA,MAAM,EAACA,MALwC;AAM/CY,MAAAA,WAAW,EAAC;AANmC,KAAjD,EAOCC,IAPD,CAOM,MAAI;AACVC,MAAAA,KAAK,CAAC,SAAD,CAAL;AACD,KATC;AAUD,GAjCD;;AAkCA,MAAG7C,UAAU,KAAK,CAAlB,EAAoB;AACpB,wBACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,6BACE;AAAK,QAAA,SAAS,EAAC,MAAf;AAAA,gCACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADA,eAEC;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,OAA1B;AAAkC,UAAA,QAAQ,EAAE8C,KAAK,IAAIvC,QAAQ,CAACuC,KAAK,CAACC,MAAN,CAAarB,KAAd;AAA7D;AAAA;AAAA;AAAA;AAAA,gBAFD,eAGC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHD,eAIC;AAAO,UAAA,IAAI,EAAC,QAAZ;AAAqB,UAAA,IAAI,EAAC,QAA1B;AAAkC,UAAA,QAAQ,EAAEoB,KAAK,IAAIrC,SAAS,CAACqC,KAAK,CAACC,MAAN,CAAarB,KAAd;AAA9D;AAAA;AAAA;AAAA;AAAA,gBAJD,eAOE;AAAA,iCACA;AAAQ,YAAA,OAAO,EAAE,MAAM;AAAEzB,cAAAA,aAAa,CAAC,CAAD,CAAb;AAAkB,aAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA,gBAPF;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF;AAgBC;;AAED,sBACE;AAAA,eAGIG,IAAI,CAACgC,GAAL,CAAS,CAACC,SAAD,EAAWC,MAAX,KAAoB;AAC3B,0BAAO;AAAK,QAAA,KAAK,EAAE;AAACU,UAAAA,OAAO,EAAE;AAAV,SAAZ;AAAA,kBACNX,SAAS,CAACD,GAAV,CAAc,CAACG,WAAD,EAAaC,MAAb,KAAsB;AACtC,8BAAO,QAAC,WAAD;AAAa,YAAA,OAAO,EAAED,WAAtB;AAAmC,YAAA,SAAS,EAAErB,SAA9C;AAAyD,YAAA,cAAc,EAAES;AAAzE,aAA8Fa,MAA9F;AAAA;AAAA;AAAA;AAAA,kBAAP;AACF,SAFI;AADM,SAAoCF,MAApC;AAAA;AAAA;AAAA;AAAA,cAAP;AAOD,KARD,CAHJ,eAgBE;AAAA,8BACE;AAAQ,QAAA,OAAO,EAAE,MAAK3B,WAAW,CAAC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAQ,QAAA,OAAO,EAAE,MAAKA,WAAW,CAAC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF,eAGE;AAAQ,QAAA,OAAO,EAAE,MAAKA,WAAW,CAAC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHF,eAIE;AAAQ,QAAA,OAAO,EAAE,MAAKA,WAAW,CAAC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF;AAAA;AAAA;AAAA;AAAA;AAAA,YAhBF,eAsBE;AAAA,6BACE;AAAQ,QAAA,OAAO,EAAE,MAAKA,WAAW,CAAC,CAAD,CAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YAtBF,eA0BE;AAAQ,MAAA,OAAO,EAAE,MAAK;AAACsC,QAAAA,OAAO,CAACC,GAAR,CAAYhD,KAAZ;AAAmB,OAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BF,eA2BE;AAAQ,MAAA,OAAO,EAAE4B,SAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA3BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD;;GApJQ/B,M;;KAAAA,M;AAsJT,eAAeA,MAAf","sourcesContent":["import React, {useState,Component, useRef, useEffect } from 'react';\nimport createBoardCreator from '../components/createPage/createBoardCreator';\nimport CreatorTile from '../components/createPage/CreatorTile';\nimport CreatorCell from '../components/createPage/CreatorCell';\nimport CreatorBottomCells from '../components/createPage/CreatorBottomCells';\nimport  Axios  from 'axios';\nfunction Create() {\n  const [activeCard, setActiveCard] = useState(0);\n  const [board,setBoard] = useState([]);\n  const [grid,setGrid] = useState([]);\n  const [width,setWidth] = useState(3);\n  const [height,setHeight] = useState(3);\n  const [bodyPart,setBodyPart] = useState(0);\n  const [lastPos,setLastPos] = useState([0,0]);\n\n  useEffect(()=>{\n  function freshBoard (row,col){\n    const newBoard = createBoardCreator(row, col);\n      setBoard(newBoard);\n    setGrid(newBoard.board);\n  }freshBoard(height,width)\n},[height]);\n\n  const tileClick = (x,y) =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let elozo = lastPos;\n\n    if(bodyPart === 1){\n      setLastPos([x,y])\n    }\n    if(bodyPart === 5){\n\n      if(newGrid[x][y].value === 0 && x === elozo[0]){\n        if(y + 1 === elozo[1] || y - 1 === elozo[1]){\n            newGrid[x][y].value = 5;\n            elozo[1] = y;\n            setGrid(newGrid);\n            \n          }   \n      }\n      if(newGrid[x][y].value === 0 && y === elozo[1]){\n          if(x + 1 === elozo[0] || x - 1 === elozo[0]){\n            newGrid[x][y].value = 5;\n            elozo[0] = x;\n            setGrid(newGrid);\n        }   \n      }\n      setLastPos(elozo);\n    }\n    else{\n    newGrid[x][y].value = bodyPart;\n    newBoard.board = newGrid;\n    }\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }\n  const tileRightClick = (x,y) =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newGrid[x][y].value = 2;\n    newBoard.board = newGrid;\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }\n  const CellChange = (x,value) =>{\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newBoard.right[x] = 1;\n    setBoard(newBoard);\n  }\n  const submitMap = () =>{\n    let stones = ''\n    let parts = ''\n    let head = ''\n    let body = ''\n    let tail = ''\n    grid.map((singleRow,index1)=>{\n      singleRow.map((singleBlock,index2)=>{\n        if(singleBlock.value === 2 ){\n          stones = stones + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 1 ){\n          head = head + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 3 ){\n          body = body + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 4 ){\n          tail = tail + index1 + ',' + index2 + ','\n        }\n      })\n    })\n    parts = head + body + tail \n    Axios.post(\"http://localhost:3001/api/insertMap\",{\n      name:'test',\n      width:width,\n      height:height,\n      parts:parts,\n      stones:stones,\n      uploaded_by:'bob',\n  }).then(()=>{\n    alert(\"success\");\n  });\n  };\n  if(activeCard === 0){\n  return (\n    <div className='create'>\n      <div className='form'>\n      <label>width :</label>\n       <input type=\"number\" name=\"width\" onChange={event => setWidth(event.target.value)} />\n       <label>height :</label>\n       <input type=\"number\" name=\"height\"onChange={event => setHeight(event.target.value)} />\n      \n        \n        <div>\n        <button onClick={() => { setActiveCard(1) } }>Done</button>\n        </div>\n      </div>\n       \n    </div>\n  )\n  }\n\n  return( \n    <div>\n      \n      {\n        grid.map((singleRow,index1)=>{\n          return <div style={{display: \"flex\"}} key={index1}>{\n           singleRow.map((singleBlock,index2)=>{\n         return <CreatorTile details={singleBlock} tileClick={tileClick} tileRightClick={tileRightClick} key={index2}/>\n      })\n      }\n       \n          </div> \n        })\n        \n      }\n      \n      \n      <div>\n        <button onClick={() =>setBodyPart(1)}>Head</button>\n        <button onClick={() =>setBodyPart(3)}>Body</button>\n        <button onClick={() =>setBodyPart(4)}>Tail</button>\n        <button onClick={() =>setBodyPart(0)}>Delete</button>\n      </div>\n      <div>\n        <button onClick={() =>setBodyPart(5)}>draw the snake</button>\n       \n      </div>\n      <button onClick={() =>{console.log(board)}}>save map</button>\n      <button onClick={submitMap}>save map and play</button>\n    </div>\n  )\n}\n\nexport default Create;\n"]},"metadata":{},"sourceType":"module"}