{"ast":null,"code":"export default ((board, aiLastPos) => {\n  var palya = JSON.parse(JSON.stringify(board));\n  palya.pozicio = aiLastPos;\n  var rightSide = palya.right;\n  var BottomSide = palya.bottom;\n\n  function bejaro(start) {\n    var queue = [];\n    queue.push(start);\n\n    while (queue.length > 0) {\n      let currentNode = queue[0];\n\n      if (isSolution(currentNode)) {\n        console.log(currentNode);\n        return {\n          currentNode\n        };\n      }\n\n      let lepesek = getPossbleMoves(currentNode);\n      lepesek.forEach(element => {\n        queue.push(element);\n      });\n      queue.shift();\n    }\n\n    console.log(queue);\n  }\n\n  bejaro(palya);\n\n  function getPossbleMoves(allas) {\n    let moves = [];\n\n    if (allas.pozicio[0] !== 0) {\n      if (allas.board[allas.pozicio[0] - 1][allas.pozicio[1]].value !== 2) {\n        let up = JSON.parse(JSON.stringify(allas));\n        up.board[allas.pozicio[0] - 1][allas.pozicio[1]].value = 1;\n        up.pozicio[0] = allas.pozicio[0] - 1;\n        moves.push(up);\n      }\n    }\n\n    if (allas.pozicio[1] !== 0) {\n      if (allas.board[allas.pozicio[0]][allas.pozicio[1] - 1].value !== 2) {\n        let left = JSON.parse(JSON.stringify(allas));\n        left.board[allas.pozicio[0]][allas.pozicio[1] - 1].value = 1;\n        left.pozicio[1] = left.pozicio[1] - 1;\n\n        function addToList() {\n          moves.push(left);\n        }\n\n        addToList();\n      }\n    }\n\n    if (allas.pozicio[0] !== allas.right.length - 1) {\n      if (allas.board[allas.pozicio[0] + 1][allas.pozicio[1]].value !== 2) {\n        let down = JSON.parse(JSON.stringify(allas));\n        down.board[allas.pozicio[0] + 1][allas.pozicio[1]].value = 1;\n        down.pozicio[0] = allas.pozicio[0] + 1;\n        moves.push(down);\n      }\n    }\n\n    if (allas.pozicio[1] !== allas.bottom.length - 1) {\n      if (allas.board[allas.pozicio[0]][allas.pozicio[1] + 1].value !== 2) {\n        let right = JSON.parse(JSON.stringify(allas));\n        right.board[allas.pozicio[0]][allas.pozicio[1] + 1].value = 1;\n        right.pozicio[1] = allas.pozicio[1] + 1;\n        moves.push(right);\n      }\n    }\n\n    return moves;\n  }\n\n  function isSolution(allas) {\n    let rightCount = 0;\n    let bottomCount = 0;\n    let bodypartCount = 0; //oldalsó check\n\n    allas.board.map((singleRow, index1) => {\n      let rowCount = 0;\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 1) {\n          rowCount++;\n        }\n      });\n\n      if (rowCount === rightSide[index1]) {\n        rightCount++;\n      }\n    }); //alsó check\n\n    for (let i = 0; i < allas.bottom.length; i++) {\n      let colCount = 0;\n\n      for (let j = 0; j < allas.right.length; j++) {\n        if (allas.board[j][i].value === 1) {\n          colCount++;\n        }\n      }\n\n      if (colCount === BottomSide[i]) {\n        bottomCount++;\n      }\n    } //testresz check\n\n\n    allas.board.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 3) {\n          bodypartCount++;\n        }\n\n        if (singleBlock.value === 4) {\n          bodypartCount++;\n        }\n      });\n    });\n\n    if (rightCount === allas.right.length && bottomCount === allas.bottom.length && bodypartCount === 0) {\n      return true;\n    }\n  } //\n\n});","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/components/Mestint.js"],"names":["board","aiLastPos","palya","JSON","parse","stringify","pozicio","rightSide","right","BottomSide","bottom","bejaro","start","queue","push","length","currentNode","isSolution","console","log","lepesek","getPossbleMoves","forEach","element","shift","allas","moves","value","up","left","addToList","down","rightCount","bottomCount","bodypartCount","map","singleRow","index1","rowCount","singleBlock","index2","i","colCount","j"],"mappings":"AAAA,gBAAe,CAACA,KAAD,EAAQC,SAAR,KAAsB;AAC7B,MAAIC,KAAK,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeL,KAAf,CAAX,CAAZ;AACAE,EAAAA,KAAK,CAACI,OAAN,GAAgBL,SAAhB;AACA,MAAIM,SAAS,GAAGL,KAAK,CAACM,KAAtB;AACA,MAAIC,UAAU,GAAGP,KAAK,CAACQ,MAAvB;;AAEA,WAASC,MAAT,CAAgBC,KAAhB,EAAsB;AAClB,QAAIC,KAAK,GAAG,EAAZ;AACAA,IAAAA,KAAK,CAACC,IAAN,CAAWF,KAAX;;AACA,WAAOC,KAAK,CAACE,MAAN,GAAe,CAAtB,EAAwB;AACpB,UAAIC,WAAW,GAAGH,KAAK,CAAC,CAAD,CAAvB;;AACA,UAAGI,UAAU,CAACD,WAAD,CAAb,EAA2B;AACvBE,QAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AACA,eAAO;AAACA,UAAAA;AAAD,SAAP;AACH;;AACD,UAAII,OAAO,GAAGC,eAAe,CAACL,WAAD,CAA7B;AACAI,MAAAA,OAAO,CAACE,OAAR,CAAgBC,OAAO,IAAI;AACvBV,QAAAA,KAAK,CAACC,IAAN,CAAWS,OAAX;AACH,OAFD;AAGAV,MAAAA,KAAK,CAACW,KAAN;AAEH;;AAKDN,IAAAA,OAAO,CAACC,GAAR,CAAYN,KAAZ;AACH;;AAAAF,EAAAA,MAAM,CAACT,KAAD,CAAN;;AAGD,WAASmB,eAAT,CAAyBI,KAAzB,EAA+B;AAC7B,QAAIC,KAAK,GAAG,EAAZ;;AACA,QAAGD,KAAK,CAACnB,OAAN,CAAc,CAAd,MAAqB,CAAxB,EAA0B;AACxB,UAAGmB,KAAK,CAACzB,KAAN,CAAYyB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAA/B,EAAkCmB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAlC,EAAoDqB,KAApD,KAA8D,CAAjE,EAAoE;AAClE,YAAKC,EAAE,GAAGzB,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeoB,KAAf,CAAX,CAAV;AACFG,QAAAA,EAAE,CAAC5B,KAAH,CAASyB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAA5B,EAA+BmB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAA/B,EAAiDqB,KAAjD,GAAyD,CAAzD;AACAC,QAAAA,EAAE,CAACtB,OAAH,CAAW,CAAX,IAAgBmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAAnC;AACAoB,QAAAA,KAAK,CAACZ,IAAN,CAAWc,EAAX;AACC;AACF;;AACD,QAAGH,KAAK,CAACnB,OAAN,CAAc,CAAd,MAAqB,CAAxB,EAA0B;AACxB,UAAGmB,KAAK,CAACzB,KAAN,CAAYyB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAZ,EAA8BmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAAjD,EAAoDqB,KAApD,KAA8D,CAAjE,EAAmE;AACjE,YAAKE,IAAI,GAAG1B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeoB,KAAf,CAAX,CAAZ;AACAI,QAAAA,IAAI,CAAC7B,KAAL,CAAWyB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAX,EAA6BmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAAhD,EAAmDqB,KAAnD,GAA2D,CAA3D;AACAE,QAAAA,IAAI,CAACvB,OAAL,CAAa,CAAb,IAAkBuB,IAAI,CAACvB,OAAL,CAAa,CAAb,IAAkB,CAApC;;AACA,iBAASwB,SAAT,GAAoB;AAClBJ,UAAAA,KAAK,CAACZ,IAAN,CAAWe,IAAX;AACD;;AAAAC,QAAAA,SAAS;AAEX;AACF;;AACD,QAAGL,KAAK,CAACnB,OAAN,CAAc,CAAd,MAAqBmB,KAAK,CAACjB,KAAN,CAAYO,MAAZ,GAAqB,CAA7C,EAA+C;AAC3C,UAAGU,KAAK,CAACzB,KAAN,CAAYyB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAA/B,EAAkCmB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAlC,EAAoDqB,KAApD,KAA8D,CAAjE,EAAoE;AAClE,YAAKI,IAAI,GAAG5B,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeoB,KAAf,CAAX,CAAZ;AACAM,QAAAA,IAAI,CAAC/B,KAAL,CAAWyB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAA9B,EAAiCmB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAjC,EAAmDqB,KAAnD,GAA2D,CAA3D;AACAI,QAAAA,IAAI,CAACzB,OAAL,CAAa,CAAb,IAAkBmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAArC;AACAoB,QAAAA,KAAK,CAACZ,IAAN,CAAWiB,IAAX;AACD;AACF;;AACH,QAAGN,KAAK,CAACnB,OAAN,CAAc,CAAd,MAAqBmB,KAAK,CAACf,MAAN,CAAaK,MAAb,GAAsB,CAA9C,EAAgD;AAC5C,UAAGU,KAAK,CAACzB,KAAN,CAAYyB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAZ,EAA8BmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAAjD,EAAoDqB,KAApD,KAA8D,CAAjE,EAAmE;AAC/D,YAAKnB,KAAK,GAAGL,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeoB,KAAf,CAAX,CAAb;AACAjB,QAAAA,KAAK,CAACR,KAAN,CAAYyB,KAAK,CAACnB,OAAN,CAAc,CAAd,CAAZ,EAA8BmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAAjD,EAAoDqB,KAApD,GAA4D,CAA5D;AACAnB,QAAAA,KAAK,CAACF,OAAN,CAAc,CAAd,IAAmBmB,KAAK,CAACnB,OAAN,CAAc,CAAd,IAAmB,CAAtC;AACAoB,QAAAA,KAAK,CAACZ,IAAN,CAAWN,KAAX;AACH;AACJ;;AACD,WAAOkB,KAAP;AACD;;AAED,WAAST,UAAT,CAAoBQ,KAApB,EAA0B;AACxB,QAAIO,UAAU,GAAG,CAAjB;AACA,QAAIC,WAAW,GAAG,CAAlB;AACA,QAAIC,aAAa,GAAG,CAApB,CAHwB,CAIxB;;AACAT,IAAAA,KAAK,CAACzB,KAAN,CAAYmC,GAAZ,CAAgB,CAACC,SAAD,EAAWC,MAAX,KAAoB;AAClC,UAAIC,QAAQ,GAAG,CAAf;AACEF,MAAAA,SAAS,CAACD,GAAV,CAAc,CAACI,WAAD,EAAaC,MAAb,KAAsB;AACpC,YAAGD,WAAW,CAACZ,KAAZ,KAAsB,CAAzB,EAA2B;AACzBW,UAAAA,QAAQ;AACT;AACA,OAJD;;AAKF,UAAGA,QAAQ,KAAK/B,SAAS,CAAC8B,MAAD,CAAzB,EAAkC;AAChCL,QAAAA,UAAU;AACX;AACF,KAVD,EALwB,CAgBxB;;AACE,SAAI,IAAIS,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGhB,KAAK,CAACf,MAAN,CAAaK,MAAhC,EAAuC0B,CAAC,EAAxC,EAA2C;AACzC,UAAIC,QAAQ,GAAG,CAAf;;AACA,WAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGlB,KAAK,CAACjB,KAAN,CAAYO,MAA/B,EAAsC4B,CAAC,EAAvC,EAA0C;AACxC,YAAGlB,KAAK,CAACzB,KAAN,CAAY2C,CAAZ,EAAeF,CAAf,EAAkBd,KAAlB,KAA4B,CAA/B,EAAiC;AAC/Be,UAAAA,QAAQ;AACT;AACF;;AACD,UAAGA,QAAQ,KAAKjC,UAAU,CAACgC,CAAD,CAA1B,EAA8B;AAC5BR,QAAAA,WAAW;AACZ;AACF,KA3BqB,CA6BxB;;;AACAR,IAAAA,KAAK,CAACzB,KAAN,CAAYmC,GAAZ,CAAgB,CAACC,SAAD,EAAWC,MAAX,KAAoB;AAChCD,MAAAA,SAAS,CAACD,GAAV,CAAc,CAACI,WAAD,EAAaC,MAAb,KAAsB;AACpC,YAAGD,WAAW,CAACZ,KAAZ,KAAsB,CAAzB,EAA2B;AACzBO,UAAAA,aAAa;AACd;;AACD,YAAGK,WAAW,CAACZ,KAAZ,KAAsB,CAAzB,EAA2B;AACzBO,UAAAA,aAAa;AACd;AACA,OAPD;AASH,KAVD;;AAWA,QAAIF,UAAU,KAAKP,KAAK,CAACjB,KAAN,CAAYO,MAA3B,IAAqCkB,WAAW,KAAKR,KAAK,CAACf,MAAN,CAAaK,MAAlE,IAA4EmB,aAAa,KAAK,CAAlG,EAAoG;AAClG,aAAO,IAAP;AACD;AACF,GAlH4B,CAkH5B;;AACN,CAnHH","sourcesContent":["export default (board, aiLastPos) => {    \r\n        var palya = JSON.parse(JSON.stringify(board));\r\n        palya.pozicio = aiLastPos\r\n        var rightSide = palya.right\r\n        var BottomSide = palya.bottom\r\n        \r\n        function bejaro(start){\r\n            var queue = [];\r\n            queue.push(start);\r\n            while (queue.length > 0){\r\n                let currentNode = queue[0];\r\n                if(isSolution(currentNode)){\r\n                    console.log(currentNode);\r\n                    return {currentNode};\r\n                }\r\n                let lepesek = getPossbleMoves(currentNode);\r\n                lepesek.forEach(element => {\r\n                    queue.push(element);\r\n                });\r\n                queue.shift();\r\n                \r\n            }\r\n            \r\n          \r\n          \r\n          \r\n            console.log(queue)\r\n        }bejaro(palya);\r\n       \r\n    \r\n        function getPossbleMoves(allas){\r\n          let moves = []\r\n          if(allas.pozicio[0] !== 0){\r\n            if(allas.board[allas.pozicio[0] - 1][allas.pozicio[1]].value !== 2 ){\r\n              let  up = JSON.parse(JSON.stringify(allas));\r\n            up.board[allas.pozicio[0] - 1][allas.pozicio[1]].value = 1;\r\n            up.pozicio[0] = allas.pozicio[0] - 1;\r\n            moves.push(up);\r\n            }\r\n          }\r\n          if(allas.pozicio[1] !== 0){\r\n            if(allas.board[allas.pozicio[0]][allas.pozicio[1] - 1].value !== 2){\r\n              let  left = JSON.parse(JSON.stringify(allas));\r\n              left.board[allas.pozicio[0]][allas.pozicio[1] - 1].value = 1;\r\n              left.pozicio[1] = left.pozicio[1] - 1;\r\n              function addToList(){\r\n                moves.push(left);\r\n              }addToList()\r\n              \r\n            }\r\n          }\r\n          if(allas.pozicio[0] !== allas.right.length - 1){\r\n              if(allas.board[allas.pozicio[0] + 1][allas.pozicio[1]].value !== 2 ){\r\n                let  down = JSON.parse(JSON.stringify(allas));\r\n                down.board[allas.pozicio[0] + 1][allas.pozicio[1]].value = 1;\r\n                down.pozicio[0] = allas.pozicio[0] + 1;\r\n                moves.push(down);\r\n              }   \r\n            }\r\n          if(allas.pozicio[1] !== allas.bottom.length - 1){\r\n              if(allas.board[allas.pozicio[0]][allas.pozicio[1] + 1].value !== 2){\r\n                  let  right = JSON.parse(JSON.stringify(allas));\r\n                  right.board[allas.pozicio[0]][allas.pozicio[1] + 1].value = 1;\r\n                  right.pozicio[1] = allas.pozicio[1] + 1;\r\n                  moves.push(right);\r\n              }\r\n          }\r\n          return moves;  \r\n        }\r\n    \r\n        function isSolution(allas){\r\n          let rightCount = 0;\r\n          let bottomCount = 0;\r\n          let bodypartCount = 0;\r\n          //oldalsó check\r\n          allas.board.map((singleRow,index1)=>{   \r\n            let rowCount = 0; \r\n              singleRow.map((singleBlock,index2)=>{\r\n              if(singleBlock.value === 1){\r\n                rowCount++;\r\n              } \r\n              })\r\n            if(rowCount === rightSide[index1]){\r\n              rightCount++;\r\n            }\r\n          })\r\n          //alsó check\r\n            for(let i = 0; i < allas.bottom.length;i++){\r\n              let colCount = 0; \r\n              for(let j = 0; j < allas.right.length;j++){\r\n                if(allas.board[j][i].value === 1){\r\n                  colCount++;\r\n                } \r\n              }\r\n              if(colCount === BottomSide[i]){\r\n                bottomCount++;\r\n              }\r\n            }\r\n          \r\n          //testresz check\r\n          allas.board.map((singleRow,index1)=>{   \r\n              singleRow.map((singleBlock,index2)=>{\r\n              if(singleBlock.value === 3){\r\n                bodypartCount++\r\n              } \r\n              if(singleBlock.value === 4){\r\n                bodypartCount++\r\n              } \r\n              })\r\n            \r\n          })\r\n          if( rightCount === allas.right.length && bottomCount === allas.bottom.length && bodypartCount === 0){\r\n            return true\r\n          }\r\n        }//\r\n  };\r\n  "]},"metadata":{},"sourceType":"module"}