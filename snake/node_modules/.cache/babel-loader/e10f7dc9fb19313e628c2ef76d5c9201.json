{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\components\\\\homePage\\\\Board.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState, useContext } from 'react';\nimport createBoard from '../createBoard';\nimport Tile from './Tile';\nimport Cell from './Cell';\nimport BottomCells from './BottomCells';\nimport { ChosenMap } from '../ChosenMap';\nimport Axios from \"axios\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Board = () => {\n  _s();\n\n  const {\n    chosenMap,\n    setChosenMap\n  } = useContext(ChosenMap);\n  const [grid, setGrid] = useState([]);\n  const [lastPos, setLastPos] = useState([0, 0]);\n  const [BottomSide, setBottomSide] = useState([0]);\n  const [rightSide, setRightSide] = useState([0]);\n  const [aiBoard, setAIBoard] = useState([]); //létre hozzuk a boardot\n\n  useEffect(() => {\n    let width = 5;\n    let height = 5;\n    let parts = \"0,0,0,1,0,2,\";\n    let stones = \"1,0,1,2,1,4,3,0,\";\n    let right = \"3,0,0,0,0\";\n    let bottom = \"1,1,1,0,0\";\n\n    function mapGetter() {\n      Axios.get(`http://localhost:3001/api/loadMap/${chosenMap}`).then(response => {\n        width = response.data[0].width;\n        height = response.data[0].height;\n        parts = response.data[0].parts;\n        stones = response.data[0].stones;\n        right = response.data[0].rightS;\n        bottom = response.data[0].bottom;\n\n        function freshBoard() {\n          const newBoard = createBoard(width, height, parts, stones, right, bottom);\n          setAIBoard(newBoard);\n          setGrid(newBoard.board);\n          setBottomSide(newBoard.bottom);\n          setRightSide(newBoard.right);\n\n          function getStarterPos() {\n            newBoard.board.map((singleRow, index1) => {\n              singleRow.map((singleBlock, index2) => {\n                if (singleBlock.value === 1) {\n                  setLastPos([index1, index2]);\n                }\n              });\n            });\n          }\n\n          getStarterPos();\n        }\n\n        freshBoard();\n      });\n    }\n\n    mapGetter();\n  }, []);\n  useEffect(() => {\n    let rightCount = 0;\n    let bottomCount = 0;\n    let bodypartCount = 0; //oldalsó check\n\n    grid.map((singleRow, index1) => {\n      let rowCount = 0;\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 1) {\n          rowCount++;\n        }\n      });\n\n      if (rowCount === rightSide[index1]) {\n        rightCount++;\n      }\n    }); //alsó check\n\n    if (BottomSide.length > 1) {\n      for (let i = 0; i < BottomSide.length; i++) {\n        let colCount = 0;\n\n        for (let j = 0; j < rightSide.length; j++) {\n          if (grid[j][i].value === 1) {\n            colCount++;\n          }\n        }\n\n        if (colCount === BottomSide[i]) {\n          bottomCount++;\n        }\n      }\n    } //testresz check\n\n\n    grid.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 3) {\n          bodypartCount++;\n        }\n\n        if (singleBlock.value === 4) {\n          bodypartCount++;\n        }\n      });\n    });\n\n    if (rightCount === rightSide.length && bottomCount === BottomSide.length && bodypartCount === 0) {\n      alert('win');\n    }\n  }, [grid]); //mezőre kattintás\n\n  const tileClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let elozo = lastPos;\n    console.log(lastPos);\n\n    if (x === elozo[0]) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n        if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n          newGrid[x][y].value = 1;\n          elozo[1] = y;\n          setGrid(newGrid);\n        }\n      }\n    }\n\n    if (y === elozo[1]) {\n      if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n        if (x + 1 === elozo[0] || x - 1 === elozo[0]) {\n          newGrid[x][y].value = 1;\n          elozo[0] = x;\n          setGrid(newGrid);\n        }\n      }\n\n      setLastPos(elozo);\n    }\n  }; //Mestint\n\n\n  const solver = () => {\n    console.log(aiBoard.board);\n    console.log(aiBoard.board[1][1].value);\n    var aiGrid = [aiBoard.right.length][aiBoard.bottom.length];\n    aiBoard.board.map((row, index1) => {\n      row.map((col, index2) => {\n        aiGrid[index1][index2] = col.value;\n      });\n    });\n    console.log(aiGrid);\n    var adjList = {};\n    var possibleMoves = [[-1, 0], //up\n    [1, 0], //down\n    [0, 1], //right\n    [0, -1] //left\n    ];\n\n    for (var row = 0; row < aiBoard.right.length; row++) {\n      for (var col = 0; col < aiBoard.right.length; col++) {\n        if (aiBoard.board[row][col].value == 2) {\n          continue;\n        }\n\n        var current = aiBoard.board[row][col];\n        var neighbours = [];\n\n        for (var count = 0; count < possibleMoves.length; count++) {\n          var nRow = possibleMoves[count][0] + row;\n          var nCol = possibleMoves[count][1] + col;\n\n          if (nRow >= 0 && nRow < aiBoard.board.length && nCol >= 0 && nCol < aiBoard.board[0].length) {\n            if (aiBoard.board[nRow][nCol].value != 2) {\n              neighbours.push([nRow, nCol]);\n            }\n          }\n        }\n\n        adjList[current] = neighbours;\n      }\n    }\n\n    console.log(adjList[1]);\n  }; //renderelés\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [grid.map((singleRow, index1) => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: \"flex\"\n        },\n        children: [singleRow.map((singleBlock, index2) => {\n          return /*#__PURE__*/_jsxDEV(Tile, {\n            details: singleBlock,\n            tileClick: tileClick\n          }, index2, false, {\n            fileName: _jsxFileName,\n            lineNumber: 181,\n            columnNumber: 18\n          }, this);\n        }), /*#__PURE__*/_jsxDEV(Cell, {\n          value: rightSide[index1]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 184,\n          columnNumber: 12\n        }, this)]\n      }, index1, true, {\n        fileName: _jsxFileName,\n        lineNumber: 179,\n        columnNumber: 14\n      }, this);\n    }), /*#__PURE__*/_jsxDEV(BottomCells, {\n      values: BottomSide\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: solver,\n        children: \"Solve with AI\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 175,\n    columnNumber: 14\n  }, this);\n};\n\n_s(Board, \"hTQsiwyyxLQOn40BK+RNWMLalJA=\");\n\n_c = Board;\nexport default Board;\n\nvar _c;\n\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/components/homePage/Board.js"],"names":["React","useEffect","useState","useContext","createBoard","Tile","Cell","BottomCells","ChosenMap","Axios","Board","chosenMap","setChosenMap","grid","setGrid","lastPos","setLastPos","BottomSide","setBottomSide","rightSide","setRightSide","aiBoard","setAIBoard","width","height","parts","stones","right","bottom","mapGetter","get","then","response","data","rightS","freshBoard","newBoard","board","getStarterPos","map","singleRow","index1","singleBlock","index2","value","rightCount","bottomCount","bodypartCount","rowCount","length","i","colCount","j","alert","tileClick","x","y","newGrid","JSON","parse","stringify","elozo","console","log","solver","aiGrid","row","col","adjList","possibleMoves","current","neighbours","count","nRow","nCol","push","display"],"mappings":"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","sourcesContent":["import React,{useEffect, useState, useContext} from 'react'\r\nimport createBoard from '../createBoard';\r\nimport Tile from './Tile'\r\nimport Cell from './Cell'\r\nimport BottomCells from './BottomCells';\r\nimport { ChosenMap } from '../ChosenMap';\r\nimport Axios from \"axios\";\r\n\r\nconst Board = () => {\r\n  const {chosenMap, setChosenMap} = useContext(ChosenMap);\r\n  const [grid,setGrid] = useState([]);\r\n  const [lastPos,setLastPos] = useState([0,0]);\r\n  const [BottomSide,setBottomSide] = useState([0]);\r\n  const [rightSide,setRightSide] = useState([0]);\r\n  const [aiBoard,setAIBoard] = useState([]);\r\n//létre hozzuk a boardot\r\n  useEffect(() =>{\r\n    let width = 5\r\n    let height = 5\r\n    let parts = \"0,0,0,1,0,2,\"\r\n    let stones = \"1,0,1,2,1,4,3,0,\"\r\n    let right = \"3,0,0,0,0\"\r\n    let bottom = \"1,1,1,0,0\"\r\n    function mapGetter(){\r\n      Axios.get(`http://localhost:3001/api/loadMap/${chosenMap}`).then((response) =>{\r\n      width = response.data[0].width\r\n      height = response.data[0].height\r\n      parts = response.data[0].parts\r\n      stones = response.data[0].stones\r\n      right = response.data[0].rightS\r\n      bottom = response.data[0].bottom\r\n\r\n      function freshBoard(){\r\n        const newBoard = createBoard(width, height, parts, stones, right, bottom);\r\n        setAIBoard(newBoard);\r\n        setGrid(newBoard.board);\r\n        setBottomSide(newBoard.bottom);\r\n        setRightSide(newBoard.right);\r\n\r\n        function getStarterPos(){\r\n         newBoard.board.map((singleRow,index1)=>{ \r\n          singleRow.map((singleBlock,index2)=>{ \r\n           if(singleBlock.value === 1){\r\n             setLastPos([index1,index2])\r\n           }\r\n          })\r\n         })\r\n\r\n\r\n        }getStarterPos();\r\n      }freshBoard();\r\n      }); \r\n    }mapGetter();\r\n    \r\n  }, []);\r\n  useEffect(() =>{\r\n    let rightCount = 0;\r\n    let bottomCount = 0;\r\n    let bodypartCount = 0;\r\n    //oldalsó check\r\n    grid.map((singleRow,index1)=>{   \r\n      let rowCount = 0; \r\n        singleRow.map((singleBlock,index2)=>{\r\n         if(singleBlock.value === 1){\r\n          rowCount++;\r\n         } \r\n        })\r\n      if(rowCount === rightSide[index1]){\r\n        rightCount++;\r\n      }\r\n    })\r\n    //alsó check\r\n    if(BottomSide.length>1){\r\n      for(let i = 0; i < BottomSide.length;i++){\r\n        let colCount = 0; \r\n        for(let j = 0; j < rightSide.length;j++){\r\n          if(grid[j][i].value === 1){\r\n            colCount++;\r\n           } \r\n        }\r\n        if(colCount === BottomSide[i]){\r\n          bottomCount++;\r\n        }\r\n      }\r\n    }\r\n    //testresz check\r\n    grid.map((singleRow,index1)=>{   \r\n        singleRow.map((singleBlock,index2)=>{\r\n         if(singleBlock.value === 3){\r\n          bodypartCount++\r\n         } \r\n         if(singleBlock.value === 4){\r\n          bodypartCount++\r\n         } \r\n        })\r\n      \r\n    })\r\n    if( rightCount === rightSide.length && bottomCount === BottomSide.length && bodypartCount === 0){\r\n      alert('win')\r\n    }\r\n  }, [grid]);\r\n  \r\n  \r\n\r\n  //mezőre kattintás\r\n  const tileClick = (x,y) =>{\r\n    let newGrid = JSON.parse(JSON.stringify(grid));\r\n    let elozo = lastPos;\r\n    console.log(lastPos)\r\n    if(x === elozo[0]){\r\n    if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 ||newGrid[x][y].value === 4 ){\r\n      if(y + 1 === elozo[1] || y - 1 === elozo[1]){\r\n        newGrid[x][y].value = 1;\r\n        elozo[1] = y;\r\n        setGrid(newGrid);\r\n        \r\n      }   \r\n    }\r\n  }\r\n  if( y === elozo[1]){\r\n    if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 ||newGrid[x][y].value === 4 ){\r\n      if(x + 1 === elozo[0] || x - 1 === elozo[0]){\r\n        newGrid[x][y].value = 1;\r\n        elozo[0] = x;\r\n        setGrid(newGrid);\r\n    }   \r\n    }\r\n    setLastPos(elozo);\r\n  }\r\n  }\r\n  //Mestint\r\n  const solver=()=>{\r\n    console.log(aiBoard.board)\r\n    console.log(aiBoard.board[1][1].value)\r\n    var aiGrid=[aiBoard.right.length][aiBoard.bottom.length]\r\n\r\n    aiBoard.board.map((row,index1) =>{\r\n      row.map((col,index2) =>{\r\n        aiGrid[index1][index2]=col.value;\r\n      })\r\n    })\r\n    console.log(aiGrid)\r\n    var adjList = {};\r\n    var possibleMoves =[\r\n      [-1,0], //up\r\n      [1,0], //down\r\n      [0,1], //right\r\n      [0,-1], //left\r\n    ];\r\n    for(var row = 0;row < aiBoard.right.length;row++){\r\n      for(var col = 0;col < aiBoard.right.length;col++){\r\n        if(aiBoard.board[row][col].value == 2){\r\n          continue;\r\n        }\r\n        var current = aiBoard.board[row][col];\r\n        var neighbours =[];\r\n\r\n        for(var count = 0;count < possibleMoves.length; count++){\r\n            var nRow = possibleMoves[count][0] + row;\r\n            var nCol = possibleMoves[count][1] + col;\r\n\r\n            if((nRow >= 0 && nRow < aiBoard.board.length)&&(nCol >= 0 && nCol < aiBoard.board[0].length)){\r\n              if(aiBoard.board[nRow][nCol].value != 2){\r\n                neighbours.push([nRow,nCol]);\r\n              }\r\n            }\r\n\r\n        }\r\n        adjList[current]= neighbours;\r\n      }\r\n    }\r\n    console.log(adjList[1]);\r\n  }\r\n   //renderelés\r\n    return ( <div>\r\n    {\r\n      \r\n    grid.map((singleRow,index1)=>{\r\n      return <div style={{display: \"flex\"}} key={index1}>{\r\n        singleRow.map((singleBlock,index2)=>{\r\n          return <Tile details={singleBlock} tileClick={tileClick} key={index2}/>;\r\n        })\r\n      }\r\n           <Cell value={rightSide[index1]}/>    \r\n      </div>\r\n      \r\n      \r\n    })\r\n    \r\n    }\r\n    <BottomCells values={BottomSide}/>\r\n    <div>\r\n      <button onClick={solver}>Solve with AI</button>\r\n    </div>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\nexport default Board;"]},"metadata":{},"sourceType":"module"}