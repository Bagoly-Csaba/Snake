{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Bobafet\\\\Desktop\\\\snake\\\\snake\\\\src\\\\pages\\\\Create.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, Component, useRef, useEffect, useContext } from 'react';\nimport createBoardCreator from '../components/createPage/createBoardCreator';\nimport CreatorTile from '../components/createPage/CreatorTile';\nimport CreatorCell from '../components/createPage/CreatorCell';\nimport CreatorBottomCells from '../components/createPage/CreatorBottomCells';\nimport Axios from 'axios';\nimport { UserContext } from '../components/UserContext';\nimport { ChosenMap } from '../components/ChosenMap';\nimport { useHistory } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Create() {\n  _s();\n\n  const history = useHistory();\n  const [activeCard, setActiveCard] = useState(0);\n  const [board, setBoard] = useState([]);\n  const [grid, setGrid] = useState([]);\n  const [width, setWidth] = useState(3);\n  const [height, setHeight] = useState(3);\n  const [bodyPart, setBodyPart] = useState(0);\n  const [lastPos, setLastPos] = useState([0, 0]);\n  const [savedBoard, setSavedBoard] = useState([]);\n  const [buildStade, setBuildStade] = useState(0);\n  const {\n    user,\n    setUser\n  } = useContext(UserContext);\n  const {\n    chosenMap,\n    setChosenMap\n  } = useContext(ChosenMap);\n  useEffect(() => {\n    function freshBoard(row, col) {\n      const newBoard = createBoardCreator(row, col);\n      setBoard(newBoard);\n      setGrid(newBoard.board);\n    }\n\n    freshBoard(height, width);\n  }, [height]);\n\n  const tileClick = (x, y) => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let elozo = lastPos;\n\n    if (bodyPart === 1) {\n      setLastPos([x, y]);\n    }\n\n    if (bodyPart === 5) {\n      if (x === elozo[0]) {\n        if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n          if (y + 1 === elozo[1] || y - 1 === elozo[1]) {\n            newGrid[x][y].value = 5;\n            elozo[1] = y;\n            setGrid(newGrid);\n          }\n        }\n      }\n\n      if (y === elozo[1]) {\n        if (newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4) {\n          if (x + 1 === elozo[0] || x - 1 === elozo[0]) {\n            newGrid[x][y].value = 5;\n            elozo[0] = x;\n            setGrid(newGrid);\n          }\n        }\n      }\n\n      setLastPos(elozo);\n    } else {\n      newGrid[x][y].value = bodyPart;\n      newBoard.board = newGrid;\n    }\n\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }; //bal click event\n\n\n  const tileRightClick = (x, y) => {\n    if (buildStade == 0) {\n      let newGrid = JSON.parse(JSON.stringify(grid));\n      let newBoard = JSON.parse(JSON.stringify(board));\n      newGrid[x][y].value = 2;\n      newBoard.board = newGrid;\n      setGrid(newGrid);\n      setBoard(newBoard);\n    }\n  }; //el menti a testrészeket és át vált a test berajzolására\n\n\n  const saveMap = () => {\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let fej = 0;\n    let test = 0;\n    let farok = 0;\n    let ko = 0;\n    newGrid.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 1) {\n          fej++;\n        }\n\n        if (singleBlock.value === 3) {\n          test++;\n        }\n\n        if (singleBlock.value === 4) {\n          farok++;\n        }\n\n        if (singleBlock.value === 2) {\n          ko++;\n        }\n      });\n    });\n\n    if (fej === 1 && test === 1 && farok === 1 && ko > 0) {\n      setSavedBoard(newGrid);\n      setBuildStade(1);\n    } else {\n      alert('ther can only be 1 of every body part and there has to be one of every bodypart and there must be at least one stone');\n    }\n  };\n\n  const submitMap = () => {\n    //testrészek és kövek mentése\n    let stones = '';\n    let parts = '';\n    let head = '';\n    let body = '';\n    let tail = '';\n    savedBoard.map((singleRow, index1) => {\n      singleRow.map((singleBlock, index2) => {\n        if (singleBlock.value === 2) {\n          stones = stones + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 1) {\n          head = head + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 3) {\n          body = body + index1 + ',' + index2 + ',';\n        }\n\n        if (singleBlock.value === 4) {\n          tail = tail + index1 + ',' + index2 + ',';\n        }\n      });\n    });\n    parts = head + body + tail; //le vesszük az utolso vesszőt a strindről \n\n    parts = parts.slice(0, -1);\n    stones = stones.slice(0, -1); //oldalak számolása\n    //jobb oldal\n\n    let right = [];\n    let bottom = [];\n    savedBoard.map((singleRow, index1) => {\n      let counter = 0;\n      singleRow.map((singleBlock, index2) => {\n        if (grid[index1][index2].value === 5 || grid[index1][index2].value === 1) {\n          counter++;\n        }\n      });\n      right.push(counter);\n    }); //bal oldal\n\n    if (grid.length > 1) {\n      for (let i = 0; i < width; i++) {\n        let colCount = 0;\n\n        for (let j = 0; j < height; j++) {\n          if (grid[j][i].value === 1 || grid[j][i].value === 5) {\n            colCount++;\n          }\n        }\n\n        bottom.push(colCount);\n      }\n    } //oldalak stringé alakítása  \n    //map mentése\n\n\n    Axios.post(\"http://localhost:3001/api/insertMap\", {\n      name: 'test',\n      width: width,\n      height: height,\n      parts: parts,\n      stones: stones,\n      right: right.toString(),\n      bottom: bottom.toString(),\n      uploaded_by: 'test'\n    }).then(() => {\n      console.log(result.id);\n    });\n    setChosenMap(1);\n  }; //routing\n\n\n  const toHome = () => {\n    history.push('/');\n  };\n\n  const toGame = () => {\n    history.push('/Game');\n  }; //rendelelés\n  //map méret bekérés\n\n\n  if (activeCard === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"create\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            autoComplete: \"off\",\n            name: \"width\",\n            placeholder: \"width\",\n            onChange: event => setWidth(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 204,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"number\",\n            autoComplete: \"off\",\n            name: \"height\",\n            placeholder: \"height\",\n            onChange: event => setHeight(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 208,\n            columnNumber: 8\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 207,\n          columnNumber: 8\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container\",\n          children: /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"gomb\",\n            onClick: () => {\n              setActiveCard(1);\n            },\n            children: \"Done\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 212,\n            columnNumber: 9\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 211,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 5\n    }, this);\n  } //kövek és test részek be rajzolása\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"create\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [grid.map((singleRow, index1) => {\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: \"flex\"\n          },\n          children: singleRow.map((singleBlock, index2) => {\n            return /*#__PURE__*/_jsxDEV(CreatorTile, {\n              details: singleBlock,\n              tileClick: tileClick,\n              tileRightClick: tileRightClick\n            }, index2, false, {\n              fileName: _jsxFileName,\n              lineNumber: 227,\n              columnNumber: 17\n            }, this);\n          })\n        }, index1, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 18\n        }, this);\n      }), buildStade === 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createDoboz\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createGomb\",\n            onClick: () => setBodyPart(1),\n            children: \"Head\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 239,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createGomb\",\n            onClick: () => setBodyPart(3),\n            children: \"Body\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 240,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createGomb\",\n            onClick: () => setBodyPart(4),\n            children: \"Tail\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 241,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            className: \"createGomb\",\n            onClick: () => setBodyPart(0),\n            children: \"Delete\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 238,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"createDoboz2\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"createGomb\",\n              onClick: () => {\n                saveMap();\n                setBodyPart(5);\n              },\n              children: \"draw the snake\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 13\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 244,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 237,\n        columnNumber: 9\n      }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"createDoboz3\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"createGomb\",\n          onClick: () => {\n            toHome();\n            submitMap();\n          },\n          children: \"save map\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"createGomb\",\n          onClick: () => {\n            submitMap();\n            toGame();\n          },\n          children: \"save map and play\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 8\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 221,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Create, \"DNm4zM8tOBOhWXH7OwcVzw5TV/c=\", false, function () {\n  return [useHistory];\n});\n\n_c = Create;\nexport default Create;\n\nvar _c;\n\n$RefreshReg$(_c, \"Create\");","map":{"version":3,"sources":["C:/Users/Bobafet/Desktop/snake/snake/src/pages/Create.js"],"names":["React","useState","Component","useRef","useEffect","useContext","createBoardCreator","CreatorTile","CreatorCell","CreatorBottomCells","Axios","UserContext","ChosenMap","useHistory","Create","history","activeCard","setActiveCard","board","setBoard","grid","setGrid","width","setWidth","height","setHeight","bodyPart","setBodyPart","lastPos","setLastPos","savedBoard","setSavedBoard","buildStade","setBuildStade","user","setUser","chosenMap","setChosenMap","freshBoard","row","col","newBoard","tileClick","x","y","newGrid","JSON","parse","stringify","elozo","value","tileRightClick","saveMap","fej","test","farok","ko","map","singleRow","index1","singleBlock","index2","alert","submitMap","stones","parts","head","body","tail","slice","right","bottom","counter","push","length","i","colCount","j","post","name","toString","uploaded_by","then","console","log","result","id","toHome","toGame","event","target","display"],"mappings":"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","sourcesContent":["import React, {useState,Component, useRef, useEffect, useContext } from 'react';\nimport createBoardCreator from '../components/createPage/createBoardCreator';\nimport CreatorTile from '../components/createPage/CreatorTile';\nimport CreatorCell from '../components/createPage/CreatorCell';\nimport CreatorBottomCells from '../components/createPage/CreatorBottomCells';\nimport  Axios  from 'axios';\nimport { UserContext } from '../components/UserContext'\nimport { ChosenMap } from '../components/ChosenMap'\nimport { useHistory   } from \"react-router-dom\";\n\nfunction Create() {\n  const history = useHistory();\n  const [activeCard, setActiveCard] = useState(0);\n  const [board,setBoard] = useState([]);\n  const [grid,setGrid] = useState([]);\n  const [width,setWidth] = useState(3);\n  const [height,setHeight] = useState(3);\n  const [bodyPart,setBodyPart] = useState(0);\n  const [lastPos,setLastPos] = useState([0,0]);\n  const [savedBoard,setSavedBoard] = useState([]);\n  const [buildStade, setBuildStade] = useState(0);\n  const {user, setUser} = useContext(UserContext);\n  const {chosenMap, setChosenMap} = useContext(ChosenMap);\n\n  useEffect(()=>{\n  function freshBoard (row,col){\n    const newBoard = createBoardCreator(row, col);\n      setBoard(newBoard);\n    setGrid(newBoard.board);\n  }freshBoard(height,width)\n},[height]);\n\n  const tileClick = (x,y) =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    let elozo = lastPos;\n\n    if(bodyPart === 1){\n      setLastPos([x,y])\n    }\n    if(bodyPart === 5){\n      if(x === elozo[0]){\n        if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 ){\n          if(y + 1 === elozo[1] || y - 1 === elozo[1]){\n              newGrid[x][y].value = 5;\n              elozo[1] = y;\n              setGrid(newGrid);\n            }   \n        }\n      }\n      if(y === elozo[1]){\n        if(newGrid[x][y].value === 0 || newGrid[x][y].value === 3 || newGrid[x][y].value === 4 ){\n            if(x + 1 === elozo[0] || x - 1 === elozo[0]){\n              newGrid[x][y].value = 5;\n              elozo[0] = x;\n              setGrid(newGrid);\n          }   \n        }\n      }\n    setLastPos(elozo);\n    }\n    else{\n    newGrid[x][y].value = bodyPart;\n    newBoard.board = newGrid;\n    }\n    setGrid(newGrid);\n    setBoard(newBoard);\n  }\n  //bal click event\n  const tileRightClick = (x,y) =>{\n    if(buildStade == 0 ){\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let newBoard = JSON.parse(JSON.stringify(board));\n    newGrid[x][y].value = 2;\n    newBoard.board = newGrid;\n    setGrid(newGrid);\n    setBoard(newBoard);\n    }\n  }\n//el menti a testrészeket és át vált a test berajzolására\n  const saveMap = () =>{\n    let newGrid = JSON.parse(JSON.stringify(grid));\n    let fej = 0\n    let test = 0\n    let farok = 0\n    let ko = 0\n\n    newGrid.map((singleRow,index1)=>{\n      singleRow.map((singleBlock,index2)=>{\n        if(singleBlock.value === 1 ){\n          fej++\n        }\n        if(singleBlock.value === 3 ){\n          test++\n        }\n        if(singleBlock.value === 4 ){\n          farok++\n        }\n        if(singleBlock.value === 2 ){\n          ko++\n        }\n      })\n    })\n    if(fej === 1 && test === 1 && farok === 1 && ko > 0){\n      \n      setSavedBoard(newGrid);\n      setBuildStade(1)\n    }\n    else{\n      alert('ther can only be 1 of every body part and there has to be one of every bodypart and there must be at least one stone')\n      \n    }\n\n    \n  }\n\n\n  const submitMap = () =>{\n  //testrészek és kövek mentése\n    let stones = ''\n    let parts = ''\n    let head = ''\n    let body = ''\n    let tail = ''\n    savedBoard.map((singleRow,index1)=>{\n      singleRow.map((singleBlock,index2)=>{\n        if(singleBlock.value === 2 ){\n          stones = stones + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 1 ){\n          head = head + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 3 ){\n          body = body + index1 + ',' + index2 + ','\n        }\n        if(singleBlock.value === 4 ){\n          tail = tail + index1 + ',' + index2 + ','\n        }\n      })\n    })\n    parts = head + body + tail\n    //le vesszük az utolso vesszőt a strindről \n    parts = parts.slice(0, -1);\n    stones = stones.slice(0, -1);\n//oldalak számolása\n  //jobb oldal\n    let right = []\n    let bottom = []\n    savedBoard.map((singleRow,index1)=>{\n      let counter = 0;\n      singleRow.map((singleBlock,index2)=>{\n        if(grid[index1][index2].value === 5 || grid[index1][index2].value === 1){\n          counter++;\n        }\n      })\n      right.push(counter);\n    })\n   \n\n  //bal oldal\n    if(grid.length>1){\n      for(let i = 0; i < width;i++){\n        let colCount = 0; \n        for(let j = 0; j < height;j++){\n          if(grid[j][i].value === 1||grid[j][i].value === 5){\n            colCount++;\n           } \n        }\n        bottom.push(colCount);\n      }\n      \n    }\n  //oldalak stringé alakítása  \n//map mentése\n    Axios.post(\"http://localhost:3001/api/insertMap\",{\n      name:'test',\n      width:width,\n      height:height,\n      parts:parts,\n      stones:stones,\n      right:right.toString(),\n      bottom:bottom.toString(),\n      uploaded_by:'test',\n  }).then(()=>{\n    console.log(result.id)\n  });\n  setChosenMap(1);\n  };\n //routing\n const toHome = () =>{\n  history.push('/')\n }\nconst toGame = ()=>{\n  history.push('/Game')\n}\n//rendelelés\n//map méret bekérés\n  if(activeCard === 0){\n  return (\n    <div className='create'>\n      <div className='form' >\n      \n      <div className='container'>\n       <input type=\"number\" autoComplete=\"off\" name=\"width\" placeholder=\"width\" onChange={event => setWidth(event.target.value)} />\n       </div>\n\n       <div className='container'>\n       <input type=\"number\" autoComplete=\"off\" name=\"height\" placeholder=\"height\" onChange={event => setHeight(event.target.value)} />\n       </div>\n        \n        <div className='container'>\n        <button className='gomb' onClick={() => { setActiveCard(1) } }>Done</button>\n        </div>\n      </div>\n       \n    </div>\n  )\n  }\n//kövek és test részek be rajzolása\n  return( \n    <div className='create'>\n    <div>\n      {\n        grid.map((singleRow,index1)=>{\n          return <div style={{display: \"flex\"}} key={index1}>{\n           singleRow.map((singleBlock,index2)=>{\n         return <CreatorTile details={singleBlock} tileClick={tileClick} tileRightClick={tileRightClick} key={index2}/>\n      })\n      }\n       \n          </div> \n        })\n        \n      }\n      \n      {buildStade === 0\n      ? <div className='createDoboz'>\n          <div >\n            <button className='createGomb' onClick={() =>setBodyPart(1)}>Head</button>\n            <button className='createGomb' onClick={() =>setBodyPart(3)}>Body</button>\n            <button className='createGomb' onClick={() =>setBodyPart(4)}>Tail</button>\n            <button className='createGomb' onClick={() =>setBodyPart(0)}>Delete</button>\n          </div>\n          <div className='createDoboz2'>\n          <div >\n            <button className='createGomb' onClick={() =>{saveMap();setBodyPart(5)}}>draw the snake</button>\n          </div>\n          </div>\n        </div>\n     \n    \n     : <div className='createDoboz3'>\n      <button className='createGomb' onClick={() =>{toHome();submitMap()}}>save map</button>\n      <button className='createGomb' onClick={() =>{submitMap();toGame()}}>save map and play</button>\n      </div>\n      }\n\n    </div>\n    </div>\n  )\n}\n\nexport default Create;\n"]},"metadata":{},"sourceType":"module"}